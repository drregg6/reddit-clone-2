{"version":3,"sources":["firebase.js","db/index.js","actions/auth.js","actions/types.js","actions/subreddits.js","components/layout/Nav.js","components/layout/Header.js","components/layout/Footer.js","components/routing/PrivateRoute.js","components/layout/Container.js","utils/dateFormatter.js","actions/votes.js","components/subreddit/Votes.js","components/homepage/PostMedia.js","components/homepage/AllPosts.js","actions/posts.js","actions/users.js","components/homepage/Index.js","components/subreddit/PostCard.js","components/subreddit/Posts.js","components/subreddit/PostForm.js","components/subreddit/Subreddit.js","utils/commentTimeFormatter.js","components/post/UpdateForm.js","actions/comments.js","components/post/CommentForm.js","components/post/ReplyForm.js","components/post/CommentReply.js","components/post/PostComment.js","components/post/Post.js","components/user/UserPost.js","components/user/UserComment.js","components/user/UpdateUserForm.js","components/user/User.js","components/subreddits/SubCard.js","components/subreddits/Subreddits.js","components/createSubreddit/CreateSubreddit.js","reducers/users.js","reducers/auth.js","reducers/posts.js","reducers/subreddits.js","reducers/comments.js","reducers/votes.js","reducers/index.js","store.js","App.js","index.js"],"names":["firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","db","firestore","settings","login","dispatch","a","provider","auth","GoogleAuthProvider","signInWithPopup","user","payload","name","displayName","id","uid","image","photoURL","newUser","created_at","FieldValue","serverTimestamp","collection","doc","set","type","console","error","message","logout","signOut","fetchSubreddits","get","forEach","push","data","connect","state","subreddits","currentUser","isLoggedIn","useEffect","className","role","aria-label","to","href","aria-expanded","data-target","aria-hidden","map","subreddit","key","onClick","Header","Date","getFullYear","rel","target","Component","component","isLoading","rest","render","props","Container","children","date","seconds","Math","floor","interval","isNaN","fetchVotes","upvote","vote_id","post_id","user_id","singlePost","upvoteFlag","userUpvoted","userDownvoted","where","update","user_upvotes","arrayRemove","updated_at","votes","increment","arrayUnion","user_downvotes","then","downvote","postId","voteId","userUpvotes","userDownvotes","indexOf","disabled","Object","entries","length","PostMedia","subreddit_id","post","users","author","filter","vote","undefined","url","src","alt","title","desc","dateFormatter","AllPosts","posts","fetchAllPosts","sort","obj1","obj2","deletePost","querySnapshot","batch","delete","ref","commit","fetchUsers","slice","PostCard","postVotes","Posts","search","useState","sortByVote","toggleSortByVote","sortByNew","toggleSortByNew","getAuthor","getVoteByPostId","getPostByVoteId","b","orderByVotes","regex","RegExp","match","filterPosts","createPost","newPost","postsDoc","votesDoc","postsPayload","votesPayload","toggleShowForm","input","setInput","handleChange","event","value","onSubmit","preventDefault","handleSubmit","placeholder","onChange","deleteSubreddit","history","window","confirm","fetchSubredditPosts","log","fetchSubreddit","params","useParams","useHistory","showForm","setSearch","keys","timeInSeconds","timeInMilliseconds","format","updatePost","body","updatedPost","oldTitle","oldDesc","oldUrl","addComment","newDoc","newComment","deleteComment","comment_id","content","parent_id","toggleReplyForm","comment","commentTimeFormatter","comments","replyForm","childrenComments","tempChildrenComments","getChildrenComments","fetchPost","res","fetchPostVote","fetchPostComments","sub_name","style","marginLeft","marginRight","margin","width","marginBottom","UserPost","UserComment","UpdateUserForm","updateUser","toggleUpdateUserForm","bio","updatedUser","fetchUser","fetchUserPosts","fetchUserComments","userPostList","toggleUserPostList","userCommentList","toggleUserCommentList","updateUserForm","SubCard","sub","nanoseconds","createSubreddit","newSubreddit","toLowerCase","replaceAll","maxLength","initialState","combineReducers","action","updatedPosts","newPosts","updatedSubreddits","deletedSubreddits","addVote","removeVote","deleteVote","middleware","thunk","store","createStore","rootReducer","composeWithDevTools","applyMiddleware","App","onAuthStateChanged","setUser","getUser","exact","path","Index","CreateSubreddit","Subreddits","Subreddit","Post","User","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.a506ef05.chunk.js","sourcesContent":["import firebase from 'firebase';\n\nconst firebaseConfig = {\n  apiKey: \"AIzaSyAqk7zFPSK034_4RN--GO6RRNIJGAX6AH8\",\n  authDomain: \"reddit-clone-2-104ec.firebaseapp.com\",\n  databaseURL: \"https://reddit-clone-2-104ec.firebaseio.com\",\n  projectId: \"reddit-clone-2-104ec\",\n  storageBucket: \"reddit-clone-2-104ec.appspot.com\",\n  messagingSenderId: \"1081257686534\",\n  appId: \"1:1081257686534:web:55d3cd74066a82e3413587\"\n};\n// Initialize Firebase\nfirebase.initializeApp(firebaseConfig);\n\nexport default firebase;","import firebase from '../firebase';\n\nconst db = firebase.firestore();\ndb.settings({});\n\nexport default db;","import {\n  LOGIN_USER,\n  LOGOUT_USER,\n  GET_CURRENT_USER,\n  LOGIN_FAIL\n} from './types';\nimport firebase from '../firebase';\nimport db from '../db';\n\n// update the store with user information\nexport const getUser = (user) => async dispatch => {\n  dispatch({\n    type: GET_CURRENT_USER,\n    payload: user\n  });\n}\n\nexport const login = () => async dispatch => {\n  try {\n    // Sign in with Firebase Auth\n    const provider = new firebase.auth.GoogleAuthProvider();\n    const { user } = await firebase.auth().signInWithPopup(provider);\n    \n    // Set up the user\n    const payload = {\n      name: user.displayName,\n      id: user.uid,\n      image: user.photoURL\n    }\n    const newUser = {\n      ...payload,\n      created_at: firebase.firestore.FieldValue.serverTimestamp()\n    }\n\n    // POST the db\n    db.collection('users').doc(newUser.id).set(newUser);\n\n    // Then send it to Redux store\n    dispatch({\n      type: LOGIN_USER,\n      payload\n    });\n  } catch (error) {\n    console.error(error.message);\n  }\n}\n\nexport const logout = () => async dispatch => {\n  try {\n    await firebase.auth().signOut();\n    dispatch({\n      type: LOGOUT_USER\n    });\n  } catch (error) {\n    console.error(error.message);\n  }\n}\n\n// login failure\nexport const userError = () => dispatch => {\n  dispatch({ type: LOGIN_FAIL })\n}","// Users\nexport const GET_USERS = 'GET_USERS';\nexport const GET_USER = 'GET_USER';\nexport const UPDATE_USER = 'UPDATE_USER';\nexport const CLEAR_USER = 'CLEAR_USER';\n\n// Auth\nexport const LOGIN_USER = 'LOGIN_USER';\nexport const LOGOUT_USER = 'LOGOUT_USER';\nexport const GET_CURRENT_USER = 'GET_CURRENT_USER';\nexport const LOGIN_FAIL = 'LOGIN_FAIL';\n\n// Subreddits\nexport const GET_SUBREDDITS = 'GET_SUBREDDITS';\nexport const GET_SUBREDDIT = 'GET_SUBREDDIT';\nexport const CREATE_SUBREDDIT = 'CREATE_SUBREDDIT';\nexport const UPDATE_SUBREDDIT = 'UPDATE_SUBREDDIT';\nexport const DELETE_SUBREDDIT = 'DELETE_SUBREDDIT';\nexport const CLEAR_SUBREDDIT = 'CLEAR_SUBREDDIT';\n\n// Posts\nexport const GET_POSTS = 'GET_POSTS';\nexport const GET_POST = 'GET_POST';\nexport const CREATE_POST = 'CREATE_POST';\nexport const DELETE_POST = 'DELETE_POST';\nexport const UPDATE_POST = 'UPDATE_POST';\nexport const CLEAR_POST = 'CLEAR_POST';\nexport const CLEAR_POSTS = 'CLEAR_POSTS';\n\n// Votes\nexport const GET_VOTES = 'GET_VOTES';\nexport const GET_VOTE = 'GET_VOTE';\nexport const ADD_VOTE = 'ADD_VOTE';\nexport const ADD_VOTES = 'ADD_VOTES';\nexport const REMOVE_VOTE = 'REMOVE_VOTE';\nexport const DELETE_VOTE = 'DELETE_VOTE';\nexport const CLEAR_VOTE = 'CLEAR_VOTE';\n\n// Comments\nexport const GET_COMMENTS = 'GET_COMMENTS';\nexport const ADD_COMMENT = 'ADD_COMMENT';\nexport const DELETE_COMMENT = 'DELETE_COMMENT';\nexport const CLEAR_COMMENTS = 'CLEAR_COMMENTS';","import {\n  GET_SUBREDDITS,\n  GET_SUBREDDIT,\n  CREATE_SUBREDDIT,\n  UPDATE_SUBREDDIT,\n  DELETE_SUBREDDIT,\n  CLEAR_SUBREDDIT\n} from './types';\nimport db from '../db';\nimport firebase from '../firebase';\n\nexport const fetchSubreddits = () => async dispatch => {\n  try {\n    let payload = [];\n    const res = await db.collection('subreddits').get();\n    res.forEach(doc => {\n      payload.push(doc.data());\n    })\n    dispatch({\n      type: GET_SUBREDDITS,\n      payload\n    });\n  } catch (error) {\n    console.error(error.message);\n  }\n}\n\nexport const fetchSubreddit = (params) => async dispatch => {\n  dispatch({ type: CLEAR_SUBREDDIT });\n  const { name } = params;\n  try {\n    let payload = {};\n    const res = await db.collection('subreddits').where('name', '==', name).get();\n    res.forEach(doc => {\n      payload = {...doc.data()};\n    });\n    dispatch({\n      type: GET_SUBREDDIT,\n      payload\n    });\n  } catch (error) {\n    console.error(error.message);\n  }\n}\n\n\nexport const createSubreddit = (body, history) => async dispatch => {\n  try {\n    // Create an ID\n    const doc = db.collection('subreddits').doc();\n    let newSubreddit = {...body};\n    newSubreddit.id = doc.id;\n    newSubreddit.created_at = firebase.firestore.FieldValue.serverTimestamp();\n\n    await db.collection('subreddits').doc(newSubreddit.id).set(newSubreddit);\n    dispatch({\n      type: CREATE_SUBREDDIT,\n      payload: newSubreddit\n    });\n    if (history) {\n      history.push(`/r/${newSubreddit.name}`);\n    }\n  } catch (error) {\n    console.error(error.message);\n  }\n}\n\n\nexport const updateSubreddit = body => async dispatch => {\n  try {\n    await db.collection('subreddits').doc(body.id).set(body);\n    \n    dispatch({\n      type: UPDATE_SUBREDDIT,\n      payload: body\n    });\n  } catch (error) {\n    console.error(error.message);\n  }\n}\n\n\nexport const deleteSubreddit = (subreddit_id, history) => async dispatch => {\n  if (window.confirm('Are you sure? This action cannot be undone!')) {\n    try {\n      // Delete associated posts\n      await db.collection('posts').where('subreddit_id', '==', subreddit_id).get().then(querySnapshot => {\n        let batch = db.batch();\n\n        querySnapshot.forEach(doc => {\n          batch.delete(doc.ref);\n        });\n\n        return batch.commit();\n      });\n      // Delete associated votes\n      await db.collection('votes').where('subreddit_id', '==', subreddit_id).get().then(querySnapshot => {\n        let batch = db.batch();\n\n        querySnapshot.forEach(doc => {\n          batch.delete(doc.ref);\n        });\n\n        return batch.commit();\n      });\n      // Delete associated comments\n      await db.collection('comments').where('subreddit_id', '==', subreddit_id).get().then(querySnapshot => {\n        let batch = db.batch();\n\n        querySnapshot.forEach(doc => {\n          batch.delete(doc.ref);\n        });\n\n        return batch.commit();\n      });\n\n      await db.collection('subreddits').doc(subreddit_id).delete();\n\n      dispatch({\n        type: DELETE_SUBREDDIT,\n        payload: subreddit_id\n      });\n      history.push('/');\n    } catch (error) {\n      console.error(error.message);\n    }\n  }\n}","import React, { useEffect } from 'react';\nimport { Link } from 'react-router-dom';\nimport PropTypes from 'prop-types';\n\nimport { connect } from 'react-redux';\nimport { login, logout } from '../../actions/auth';\nimport { fetchSubreddits } from '../../actions/subreddits';\n\nconst Nav = ({\n  login,\n  logout,\n  fetchSubreddits,\n  subreddits: { subreddits },\n  auth: { currentUser, isLoggedIn }\n}) => {\n  useEffect(() => {\n    fetchSubreddits();\n  }, [fetchSubreddits])\n  return (\n    <nav className=\"navbar is-light\" role=\"navigation\" aria-label=\"dropdown navigation\">\n      <div className=\"navbar-brand\">\n        <Link className=\"navbar-item\" to=\"/\">\n          Dave Regg's Personal Reddit\n        </Link>\n\n        <a href=\"!#\" role=\"button\" className=\"navbar-burger burger\" aria-label=\"menu\" aria-expanded=\"false\" data-target=\"navbarBasicExample\">\n          <span aria-hidden=\"true\"></span>\n          <span aria-hidden=\"true\"></span>\n          <span aria-hidden=\"true\"></span>\n        </a>\n      </div>\n\n      <div id=\"navbarBasicExample\" className=\"navbar-menu\">\n        <div className=\"navbar-start\">\n          <div className=\"navbar-item has-dropdown is-hoverable\">\n            <Link to=\"/r/index\" className=\"navbar-link is-arrowless\">\n              Subreddits\n            </Link>\n            <div className=\"navbar-dropdown\">\n              {\n                subreddits !== null && (\n                  subreddits.map(subreddit => {\n                    return (\n                      <Link key={subreddit.id} className=\"navbar-item is-capitalized\" to={`/r/${subreddit.name}`}>{subreddit.name}</Link>\n                    )\n                  })\n                )\n              }\n              { isLoggedIn && <Link className=\"navbar-item\" to='/create-a-subreddit'>Create a Subreddit</Link> }\n            </div>\n          </div>\n          <div className=\"navbar-item\">\n            { isLoggedIn && <Link to='/create-a-subreddit'>Create a Subreddit</Link>}\n          </div>\n        </div>\n\n        <div className=\"navbar-end\">\n            {\n              !isLoggedIn ? (\n                <div className=\"navbar-item\">\n                  <button className=\"button is-primary\" onClick={() => login()}>\n                    <strong>Login with Google</strong>\n                  </button>\n                </div>\n              ) : (\n                <>\n                  <div className=\"navbar-item\">\n                    <Link to={`/u/${currentUser.id}`} className=\"button is-light is-info\">{currentUser.name}</Link>\n                  </div>\n                  <div className=\"navbar-item\">\n                    <button className=\"button is-danger\" onClick={() => logout()}>\n                      Logout\n                    </button>\n                  </div>\n                </>\n              )\n            }\n        </div>\n      </div>\n    </nav>\n  )\n}\n\nNav.propTypes = {\n  auth: PropTypes.object,\n  login: PropTypes.func.isRequired,\n  logout: PropTypes.func.isRequired,\n  fetchSubreddits: PropTypes.func.isRequired,\n  subreddits: PropTypes.object,\n};\n\nconst mapStateToProps = state => ({\n  auth: state.auth,\n  subreddits: state.subreddits\n});\n\nexport default connect(\n  mapStateToProps,\n  {\n    login,\n    logout,\n    fetchSubreddits\n  }\n)(Nav);","import React from 'react';\n// import PropTypes from 'prop-types';\n\nimport Nav from './Nav';\n\nconst Header = () => {\n  return (\n    <header>\n      <Nav />\n    </header>\n  )\n}\n\n// Header.propTypes = {\n\n// }\n\nexport default Header;","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport PropTypes from 'prop-types';\n\nimport { connect } from 'react-redux';\nimport {\n  login,\n  logout\n} from '../../actions/auth';\n\nconst Footer = ({\n  auth: { isLoggedIn, currentUser }\n}) => {\n  return (\n    <footer className=\"footer\">\n      <div className=\"columns\">\n        <div className=\"column\">\n          <nav className=\"nav\">\n            <div className=\"navbar-item\">\n              <Link to='/'>Home</Link>\n            </div>\n            <div className=\"navbar-item\">\n              <Link to='/r/index'>Subreddits</Link>\n            </div>\n            {\n              isLoggedIn && (\n                <div className=\"navbar-item\">\n                  <Link to='/create-a-subreddit'>Create a Subreddit</Link>\n                </div>\n              )\n            }\n          </nav>\n        </div>\n        <div className=\"column\">\n          <p>\n            &copy;{new Date().getFullYear()} <a href=\"http://www.daveregg.com\" rel=\"noopener noreferrer\" target=\"_blank\">Dave Regg</a>\n          </p>\n        </div>\n        <div className=\"column is-2\">\n          {\n            isLoggedIn ? (\n              <nav className=\"nav\">\n                <div className=\"navbar-item\">\n                  <Link to={`/u/${currentUser.id}`} className=\"button is-light is-info mb-1\">{currentUser.name}</Link>\n                </div>\n                <div className=\"navbar-item\">\n                  <button className=\"button is-danger mt-1\" onClick={() => logout()}>Logout</button>\n                </div>\n              </nav>\n            ) : (\n              <button className=\"button is-info\" onClick={() => login()}>Login with Google</button>\n            )\n          }\n        </div>\n      </div>\n    </footer>\n  )\n}\n\nFooter.propTypes = {\n  auth: PropTypes.object,\n}\n\nconst mapStateToProps = state => ({\n  auth: state.auth\n})\n\nexport default connect(\n  mapStateToProps,\n  null\n)(Footer);","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Route, Redirect } from 'react-router-dom';\n\nimport { connect } from 'react-redux'\n\n// Not quite working with Firestore\n// If a user types in the address, isLoggedIn doesn't trigger that quickly\n// The user is not popped into the database quick enough\nconst PrivateRoute = ({\n  component: Component,\n  auth: { isLoggedIn, isLoading },\n  ...rest\n}) => {\n  return (\n    <Route\n      {...rest}\n      render={props => (!isLoggedIn && isLoading) ? (\n        <Redirect to=\"/\" />\n      ) : (\n        <Component {...props} />\n      )}\n    />\n  );\n};\n\nPrivateRoute.propTypes = {\n  auth: PropTypes.object.isRequired\n}\n\nconst mapStateToProps = state => ({\n  auth: state.auth\n});\n\nexport default connect(\n  mapStateToProps,\n  null\n)(PrivateRoute);","import React from 'react';\n\nconst Container = props => {\n  return (\n    <div className=\"container my-5\">\n      { props.children }\n    </div>\n  )\n}\n\nexport default Container;","export default function(date) {\n  date = date * 1000;\n  const seconds = Math.floor((new Date() - date) / 1000);\n\n  let interval = Math.floor(seconds / 31536000);\n  if (interval > 1) return `${interval} years`;\n\n  interval = Math.floor(seconds / 2592000);\n  if (interval > 1) return `${interval} months`;\n\n  interval = Math.floor(seconds / 86400);\n  if (interval > 1) return `${interval} days`;\n\n  interval = Math.floor(seconds / 3600);\n  if (interval > 1) return `${interval} hours`;\n\n  interval = Math.floor(seconds / 60);\n  if (interval > 1) return `${interval} minutes`;\n\n  return `${isNaN(Math.floor(seconds)) ? '0' : Math.floor(seconds)} seconds`;\n}","import {\n  GET_VOTES,\n  GET_VOTE,\n  ADD_VOTE,\n  REMOVE_VOTE,\n  CLEAR_VOTE\n} from './types';\nimport db from '../db';\nimport firebase from '../firebase';\n\n\nexport const fetchVotes = () => async dispatch => {\n  try {\n    let payload = [];\n    const res = await db.collection('votes').get();\n    res.forEach(doc => {\n      payload.push(doc.data());\n    });\n    dispatch({\n      type: GET_VOTES,\n      payload\n    });\n  } catch (error) {\n    console.error(error.message);\n  }\n}\n\n\nexport const fetchPostVote = post_id => async dispatch => {\n  let payload;\n  try {\n    const res = await db.collection('votes').where('post_id', '==', post_id).get();\n    res.forEach(doc => {\n      payload = doc.data();\n    });\n    dispatch({ type: CLEAR_VOTE });\n    dispatch({\n      type: GET_VOTE,\n      payload\n    });\n  } catch (error) {\n    console.error(error.message);\n  }\n}\n\n\nexport const upvote = (vote_id, post_id, user_id, singlePost=false) => async dispatch => {\n  // IF user_id exists in user_upvotes, remove user_id and votes--\n  // ELSE IF user_id exists in user_downvotes, remove user_id from downvotes, add user_id to upvotes, votes += 2\n  // ELSE user_id does not exist in user_upvotes, add user_id and votes++\n  let payload;\n  let upvoteFlag = {\n    userUpvoted: false,\n    userDownvoted: false\n  }\n  try {\n    let upvoteQuery = await db.collection('votes').where('post_id', '==', post_id).where('user_upvotes', 'array-contains', user_id).get();\n    upvoteQuery.forEach(doc => {\n      if (doc) upvoteFlag.userUpvoted = true;\n    });\n\n    let downvoteQuery = await db.collection('votes').where('post_id', '==', post_id).where('user_downvotes', 'array-contains', user_id).get();\n    downvoteQuery.forEach(doc => {\n      if (doc) upvoteFlag.userDownvoted = true;\n    });\n\n\n    if (upvoteFlag.userUpvoted) {\n      await db.collection('votes').doc(vote_id).update({\n        user_upvotes: firebase.firestore.FieldValue.arrayRemove(user_id),\n        updated_at: firebase.firestore.FieldValue.serverTimestamp(),\n        votes: firebase.firestore.FieldValue.increment(-1)\n      });\n    } else if (upvoteFlag.userDownvoted) {\n      await db.collection('votes').doc(vote_id).update({\n        user_upvotes: firebase.firestore.FieldValue.arrayUnion(user_id),\n        user_downvotes: firebase.firestore.FieldValue.arrayRemove(user_id),\n        updated_at: firebase.firestore.FieldValue.serverTimestamp(),\n        votes: firebase.firestore.FieldValue.increment(2)\n      });\n    } else {\n      await db.collection('votes').doc(vote_id).update({\n        user_upvotes: firebase.firestore.FieldValue.arrayUnion(user_id),\n        updated_at: firebase.firestore.FieldValue.serverTimestamp(),\n        votes: firebase.firestore.FieldValue.increment(1)\n      });\n    }\n\n    await db.collection('votes').doc(vote_id).get().then(doc => {\n      payload = doc.data();\n    });\n    if (singlePost) {\n      dispatch({ type: CLEAR_VOTE });\n      dispatch({ type: GET_VOTE, payload });\n    }\n    \n    dispatch({\n      type: ADD_VOTE,\n      payload\n    });\n  } catch (error) {\n    console.error(error.message);\n  }\n}\n\n\nexport const downvote = (vote_id, post_id, user_id, singlePost=false) => async dispatch => {\n  let payload;\n  let upvoteFlag = {\n    userUpvoted: false,\n    userDownvoted: false\n  }\n\n  try {\n    let upvoteQuery = await db.collection('votes').where('post_id', '==', post_id).where('user_upvotes', 'array-contains', user_id).get();\n    upvoteQuery.forEach(doc => {\n      if (doc) upvoteFlag.userUpvoted = true;\n    });\n\n    let downvoteQuery = await db.collection('votes').where('post_id', '==', post_id).where('user_downvotes', 'array-contains', user_id).get();\n    downvoteQuery.forEach(doc => {\n      if (doc) upvoteFlag.userDownvoted = true;\n    });\n\n\n    if (upvoteFlag.userUpvoted) {\n      await db.collection('votes').doc(vote_id).update({\n        user_upvotes: firebase.firestore.FieldValue.arrayRemove(user_id),\n        user_downvotes: firebase.firestore.FieldValue.arrayUnion(user_id),\n        updated_at: firebase.firestore.FieldValue.serverTimestamp(),\n        votes: firebase.firestore.FieldValue.increment(-2)\n      });\n    } else if (upvoteFlag.userDownvoted) {\n      await db.collection('votes').doc(vote_id).update({\n        user_downvotes: firebase.firestore.FieldValue.arrayRemove(user_id),\n        updated_at: firebase.firestore.FieldValue.serverTimestamp(),\n        votes: firebase.firestore.FieldValue.increment(1)\n      });\n    } else {\n      await db.collection('votes').doc(vote_id).update({\n        user_downvotes: firebase.firestore.FieldValue.arrayUnion(user_id),\n        updated_at: firebase.firestore.FieldValue.serverTimestamp(),\n        votes: firebase.firestore.FieldValue.increment(-1)\n      });\n    }\n\n    await db.collection('votes').doc(vote_id).get().then(doc => {\n      payload = doc.data();\n    });\n    if (singlePost) {\n      dispatch({ type: CLEAR_VOTE });\n      dispatch({ type: GET_VOTE, payload });\n    }\n    \n    dispatch({\n      type: REMOVE_VOTE,\n      payload\n    });\n  } catch (error) {\n    console.error(error.message);\n  }\n}","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport { connect } from 'react-redux';\nimport { upvote, downvote } from '../../actions/votes';\n\nconst Votes = ({\n  postId,\n  voteId,\n  upvote,\n  downvote,\n  votes,\n  userUpvotes,\n  userDownvotes,\n  currentUser\n}) => {\n  let vote_id = voteId;\n  let post_id = postId;\n  let user_id = currentUser.id;\n  return (\n    <div className=\"votes\">\n      <button\n        className={`button is-success is-small ${userUpvotes.indexOf(currentUser.id) !== -1 && 'is-light'}`}\n        disabled={Object.entries(currentUser).length === 0}\n        onClick={() => upvote(vote_id, post_id, user_id)}\n      >\n        Upvote\n      </button>\n      <span className=\"vote-amount my-1\">{ votes }</span>\n      <button\n        className={`button is-danger is-small ${userDownvotes.indexOf(currentUser.id) !== -1 && 'is-light'}`}\n        disabled={Object.entries(currentUser).length === 0}\n        onClick={() => downvote(vote_id, post_id, user_id)}\n      >\n        Downvote\n      </button>\n    </div>\n  )\n}\n\nVotes.propTypes = {\n  postId: PropTypes.string.isRequired,\n  userUpvotes: PropTypes.array,\n  userDownvotes: PropTypes.array,\n  currentUser: PropTypes.object.isRequired,\n  upvote: PropTypes.func.isRequired,\n  downvote: PropTypes.func.isRequired,\n}\n\nexport default connect(\n  null,\n  { upvote, downvote }\n)(Votes);","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport dateFormatter from '../../utils/dateFormatter';\n\nimport Votes from '../subreddit/Votes';\n\nconst PostMedia = ({\n  post,\n  users,\n  votes,\n  currentUser,\n  subreddits\n}) => {\n  const getAuthorById = user_id => {\n    return users.filter(user => user.id === user_id)[0];\n  }\n  const getSubredditById = subreddit_id => {\n    return subreddits.filter(subreddit => subreddit.id === subreddit_id)[0];\n  }\n  const getVoteByPostId = post_id => {\n    return votes.filter(vote => vote.post_id === post_id)[0];\n  }\n  const author = getAuthorById(post.user_id);\n  const subreddit = getSubredditById(post.subreddit_id);\n  let vote = getVoteByPostId(post.id);\n\n  return (\n    <div key={post.id} className=\"media\">\n      {\n        vote !== undefined && (\n          <div className=\"media-left\">\n            <Votes\n              voteId={vote.id}\n              postId={vote.post_id}\n              votes={vote.votes}\n              userUpvotes={vote.user_upvotes}\n              userDownvotes={vote.user_downvotes}\n              currentUser={currentUser}\n            />\n          </div>\n        )\n      }\n      {\n        post.url !== '' && (\n          <div className=\"media-left align-center\">\n            <figure className=\"image is-64x64\">\n              <img\n                src={post.url}\n                alt=\"\"\n              />\n            </figure>\n          </div>\n        )\n      }\n      <div className=\"media-content post-content\">\n        <p>\n          {subreddit && <Link to={`/r/${subreddit.name}/${post.id}`}>{post.title}</Link>}\n        </p>\n        <p>\n          {post.desc}\n        </p>\n        <div className=\"level\">\n          <div className=\"level-item has-text-centered is-size-7\">\n            {subreddit && <Link to={`/r/${subreddit.name}`}>{subreddit.name}</Link>}\n          </div>\n          <div className=\"level-item has-text-centered is-size-7\">\n            Created { dateFormatter(post.created_at.seconds) }\n          </div>\n          <div className=\"level-item has-text-centered is-size-7\">\n            Updated { dateFormatter(post.updated_at.seconds) }\n          </div>\n          <div className=\"level-item has-text-centered is-size-7\">\n            {author && <Link to={`/u/${author.id}`}>{author.name}</Link>}\n          </div>\n        </div>\n      </div>\n    </div>\n  )\n}\n\nPostMedia.propTypes = {\n  post: PropTypes.object,\n  users: PropTypes.array,\n  subreddits: PropTypes.array,\n  votes: PropTypes.array,\n  currentUser: PropTypes.object,\n}\n\nexport default PostMedia;","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport Container from '../layout/Container';\nimport PostMedia from './PostMedia';\n\nconst AllPosts = ({\n  posts,\n  users,\n  subreddits,\n  currentUser,\n  votes\n}) => {\n  return (\n    <Container>\n      <h1 className=\"mb-6 has-text-centered\">Check out the latest posts</h1>\n      {\n        posts.length !== 0 && (\n          posts.map(post => {\n            return (\n              <PostMedia\n                key={post.id}\n                post={post}\n                users={users}\n                subreddits={subreddits}\n                votes={votes}\n                currentUser={currentUser}\n              />\n            )\n          })\n        )\n      }\n    </Container>\n  )\n}\n\nAllPosts.propTypes = {\n  posts: PropTypes.array,\n  users: PropTypes.array,\n  subreddits: PropTypes.array,\n  votes: PropTypes.array,\n  currentUser: PropTypes.object,\n}\n\nexport default AllPosts;","import {\n  GET_POSTS,\n  GET_POST,\n  CREATE_POST,\n  UPDATE_POST,\n  DELETE_POST,\n  CLEAR_POST,\n  CLEAR_POSTS,\n  ADD_VOTES,\n  DELETE_VOTE\n} from './types';\nimport db from '../db';\nimport firebase from '../firebase';\n\n\nexport const fetchAllPosts = () => async dispatch => {\n  let payload = [];\n  try {\n    dispatch({ type: CLEAR_POSTS });\n    const res = await db.collection('posts').get();\n    res.forEach(doc => {\n      payload.push(doc.data());\n    });\n    payload = payload.sort((obj1, obj2) => {\n      return obj2.created_at - obj1.created_at\n    });\n\n    dispatch({\n      type: GET_POSTS,\n      payload\n    });\n  } catch (error) {\n    console.error(error.message);\n  }\n}\n\n\n\nexport const fetchUserPosts = (user_id) => async dispatch => {\n  try {\n    dispatch({ type: CLEAR_POSTS });\n    let payload = [];\n    const res = await db.collection('posts').where('user_id', '==', user_id).get()\n    res.forEach(doc => {\n      payload.push(doc.data());\n    });\n    dispatch({\n      type: GET_POSTS,\n      payload\n    });\n  } catch (error) {\n    console.error(error.message);\n  }\n}\n\n\n\nexport const fetchSubredditPosts = (subreddit_id) => async dispatch => {\n  try {\n    dispatch({ type: CLEAR_POSTS });\n    let payload = [];\n    const res = await db.collection('posts').where('subreddit_id', '==', subreddit_id).get();\n    res.forEach(post => {\n      payload.push(post.data());\n    });\n    payload = payload.sort((obj1, obj2) => {\n      return obj2.created_at - obj1.created_at\n    });\n    console.log(payload)\n    dispatch({\n      type: GET_POSTS,\n      payload\n    });\n  } catch (error) {\n    console.error(error.message);\n  }\n}\n\n\n\nexport const fetchPost = (post_id) => async dispatch => {\n  dispatch({ type: CLEAR_POST });\n  try {\n    let payload = {};\n\n    // Will get Post information\n    await db.collection('posts').doc(post_id).get().then(doc => {\n      payload = doc.data();\n    });\n\n    // Author information\n    const { user_id } = payload;\n    await db.collection('users').doc(user_id).get().then(doc => {\n      payload.author = doc.data();\n    });\n\n    // And comment information\n    payload.comments = [];\n    let res = await db.collection('comments').where('post_id', '==', post_id).get();\n    await res.forEach(doc => {\n      payload.comments.push(doc.data());\n    });\n\n    dispatch({\n      type: GET_POST,\n      payload\n    })\n  } catch (error) {\n    console.error(error.message);\n  }\n}\n\n\n\nexport const createPost = (newPost) => async dispatch => {\n  // generate an auto id\n  let postsDoc = db.collection('posts').doc();\n  let votesDoc = db.collection('votes').doc();\n\n  // create the payload object and populate with important data\n  let postsPayload = {...newPost};\n  postsPayload.id = postsDoc.id;\n  postsPayload.created_at = firebase.firestore.FieldValue.serverTimestamp();\n  postsPayload.updated_at = firebase.firestore.FieldValue.serverTimestamp();\n  postsPayload.user_id = firebase.auth().currentUser.uid;\n\n  // create votes collection when a post is created\n  let votesPayload = { votes: 1 };\n  votesPayload.user_upvotes = [];\n  votesPayload.user_downvotes = [];\n  votesPayload.id = votesDoc.id;\n  votesPayload.subreddit_id = postsPayload.subreddit_id;\n  votesPayload.updated_at = firebase.firestore.FieldValue.serverTimestamp();\n  votesPayload.user_upvotes.push(firebase.auth().currentUser.uid);\n  votesPayload.post_id = postsPayload.id;\n\n  try {\n    // create a post in firebase with the id created\n    await db.collection('posts').doc(postsPayload.id).set( postsPayload );\n\n    // create a vote in firebase with the id created\n    await db.collection('votes').doc(votesPayload.id).set( votesPayload );\n\n    // add it to the redux store\n    dispatch({\n      type: CREATE_POST,\n      payload: postsPayload\n    });\n    dispatch({\n      type: ADD_VOTES,\n      payload: votesPayload\n    })\n    dispatch({})\n  } catch (error) {\n    console.error(error.message);\n  }\n}\n\n\n\nexport const updatePost = (post_id, body) => async dispatch => {\n  try {\n    let updatedPost = {...body};\n    let payload;\n    updatedPost.updated_at = firebase.firestore.FieldValue.serverTimestamp();\n    await db.collection('posts').doc(post_id).update(updatedPost);\n\n    await db.collection('posts').doc(post_id).get().then(doc => {\n      payload = doc.data();\n    });\n\n    dispatch({ type: CLEAR_POST });\n    dispatch({\n      type: UPDATE_POST,\n      payload\n    });\n  } catch (error) {\n    console.error(error.message);\n  }\n}\n\n\n\nexport const deletePost = (post_id, vote_id) => async dispatch => {\n  try {\n    // delete associated comments\n    await db.collection('comments').where('post_id', '==', post_id).get().then(querySnapshot => {\n      let batch = db.batch();\n\n        querySnapshot.forEach(doc => {\n          batch.delete(doc.ref);\n        });\n\n        return batch.commit();\n    })\n\n    // delete the Post doc associated with the id\n    await db.collection('posts').doc(post_id).delete();\n    dispatch({\n      type: DELETE_POST,\n      payload: post_id\n    });\n\n    // delete the Votes doc associated with posts\n    await db.collection('votes').where('post_id', '==', post_id).get().then(querySnapshot => {\n      let batch = db.batch();\n\n        querySnapshot.forEach(doc => {\n          batch.delete(doc.ref);\n        });\n\n        return batch.commit();\n    });\n    dispatch({\n      type: DELETE_VOTE,\n      payload: vote_id\n    });\n  } catch (error) {\n    console.error(error.message);\n  }\n}","import {\n  GET_USERS,\n  GET_USER,\n  UPDATE_USER,\n  CLEAR_USER\n} from './types';\nimport db from '../db';\nimport firebase from '../firebase';\n\n\n\nexport const fetchUsers = () => async dispatch => {\n  let payload = [];\n  try {\n    const res = await db.collection('users').get();\n    res.forEach(doc => {\n      payload.push(doc.data());\n    });\n    dispatch({\n      type: GET_USERS,\n      payload\n    });\n  } catch (error) {\n    console.error(error);\n  }\n}\n\n\nexport const fetchUser = (id) => async dispatch => {\n  let payload;\n  try {\n    dispatch({ type: CLEAR_USER });\n    await db.collection('users').doc(id).get().then(doc => {\n      payload = doc.data();\n    });\n    dispatch({\n      type: GET_USER,\n      payload\n    });\n  } catch (error) {\n    console.error(error.message);\n  }\n}\n\n\nexport const updateUser = (body) => async dispatch => {\n  try {\n    let updatedUser = {...body};\n    updatedUser.updated_at = firebase.firestore.FieldValue.serverTimestamp();\n    await db.collection('users').doc(updatedUser.id).update(body);\n\n    dispatch({ type: CLEAR_USER });\n    dispatch({\n      type: UPDATE_USER,\n      payload: updatedUser\n    });\n  } catch (error) {\n    console.error(error.message);\n  }\n}","import React, { useEffect } from 'react';\nimport PropTypes from 'prop-types';\n\nimport AllPosts from './AllPosts';\n\nimport { connect } from 'react-redux';\nimport { login } from '../../actions/auth';\nimport { fetchAllPosts } from '../../actions/posts';\nimport { fetchUsers } from '../../actions/users';\nimport { fetchSubreddits } from '../../actions/subreddits';\nimport { fetchVotes } from '../../actions/votes';\n\nconst Index = ({\n  login,\n  fetchAllPosts,\n  fetchSubreddits,\n  fetchVotes,\n  fetchUsers,\n  posts: { posts },\n  auth: { currentUser, isLoggedIn },\n  users: { users },\n  subreddits: { subreddits },\n  votes: { votes }\n}) => {\n  useEffect(() => {\n    fetchAllPosts();\n    fetchSubreddits();\n    fetchUsers();\n    fetchVotes();\n  }, [\n    fetchAllPosts,\n    fetchSubreddits,\n    fetchUsers,\n    fetchVotes\n  ])\n  return (\n    <section>\n      <div className=\"hero is-info is-large\">\n        <div className=\"hero-body\">\n          <div className=\"container\">\n            <h1 className=\"title\">\n              Dave Regg's Personal Reddit\n            </h1>\n            <h2 className=\"subtitle is-size-6\">\n              Welcome to the best Reddit clone you'll ever see!\n            </h2>\n            { !isLoggedIn && <button className=\"button is-outlined\" onClick={() => login()}>Login</button> }\n          </div>\n        </div>\n      </div>\n      <AllPosts\n        posts={posts.slice(0,25)}\n        users={users}\n        subreddits={subreddits}\n        votes={votes}\n        currentUser={currentUser}\n      />\n    </section>\n  )\n}\n\nIndex.propTypes = {\n  login: PropTypes.func.isRequired,\n  fetchAllPosts: PropTypes.func.isRequired,\n  fetchVotes: PropTypes.func.isRequired,\n  fetchUsers: PropTypes.func.isRequired,\n  fetchSubreddits: PropTypes.func.isRequired,\n  posts: PropTypes.object,\n  votes: PropTypes.object,\n  auth: PropTypes.object,\n  subreddits: PropTypes.object,\n}\n\nconst mapStateToProps = state => ({\n  auth: state.auth,\n  posts: state.posts,\n  users: state.users,\n  subreddits: state.subreddits,\n  votes: state.votes\n})\n\nexport default connect(\n  mapStateToProps,\n{\n  login,\n  fetchVotes,\n  fetchAllPosts,\n  fetchSubreddits,\n  fetchUsers,\n}\n)(Index);","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport dateFormatter from '../../utils/dateFormatter';\n\nimport Votes from './Votes';\n\nconst PostCard = ({\n  deletePost,\n  currentUser,\n  subreddit,\n  post_id,\n  user_id,\n  url,\n  title,\n  desc,\n  updated_at,\n  author,\n  postVotes\n}) => {\n  const {\n    voteId,\n    userUpvotes,\n    userDownvotes,\n    votes\n  } = postVotes;\n  const vote_id = voteId;\n  return (\n    <div className=\"media\" key={post_id}>\n      <div className=\"media-left\">\n        <Votes\n          voteId={vote_id}\n          postId={post_id}\n          votes={votes}\n          userUpvotes={userUpvotes}\n          userDownvotes={userDownvotes}\n          currentUser={currentUser}\n        />\n      </div>\n      {\n        url !== '' && (\n          <div className=\"media-left align-center\">\n            <figure className=\"image is-64x64\">\n              <a href={url} target=\"_blank\" rel=\"noopener noreferrer\">\n                <img\n                  src={url}\n                  alt=\"\"\n                />\n              </a>\n            </figure>\n          </div>\n        )\n      }\n      <div className=\"media-content post-content\">\n        <p className=\"has-text-weight-bold\">\n          <Link to={`/r/${subreddit}/${post_id}`}>{title}</Link>\n        </p>\n        <p>{desc}</p>\n        <div className=\"level is-size-7\">\n          <div className=\"level-right\">\n            <div className=\"level-item\">\n              <span className=\"has-text-weight-bold mr-1\">Updated:</span> { dateFormatter(updated_at.seconds) }\n            </div>\n            <div className=\"level-item\">\n              <figure className=\"image is-24x24 mr-2\">\n                <img className=\"is-rounded\" src={author.image} alt=\"\" />\n              </figure>\n              { author.name }\n            </div>\n          </div>\n        </div>\n      </div>\n      {\n        user_id === currentUser.id && (\n          <div className=\"media-right\">\n            <button className=\"delete\" onClick={() => deletePost(post_id, vote_id)}>X</button>\n          </div>\n        )\n      }\n    </div>\n  )\n}\n\nPostCard.propTypes = {\n  deletePost: PropTypes.func,\n  post_id: PropTypes.string.isRequired,\n  user_id: PropTypes.string.isRequired,\n  subreddit: PropTypes.string.isRequired,\n  url: PropTypes.string.isRequired,\n  title: PropTypes.string.isRequired,\n  desc: PropTypes.string.isRequired,\n  author: PropTypes.object.isRequired,\n  postVotes: PropTypes.object.isRequired,\n}\n\nexport default PostCard;","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport PostCard from './PostCard';\n\nconst Posts = ({\n  search,\n  subreddit,\n  deletePost,\n  currentUser,\n  users,\n  votes,\n  posts\n}) => {\n\n  // Ordering posts by Vote or New\n  const [ sortByVote, toggleSortByVote ] = useState(false);\n  const [ sortByNew, toggleSortByNew ] = useState(true);\n\n  const orderByVotes = posts => {\n    let postVotes = posts.map(post => getVoteByPostId(post.id));\n    let orderedVotes = postVotes.sort((a, b) => {\n      return b.votes - a.votes;\n    });\n    return orderedVotes.map(vote => {\n      if (vote) {\n        return getPostByVoteId(vote.post_id);\n      } else {\n        return null;\n      }\n    });\n  }\n\n  const handleSortByVote = () => {\n    toggleSortByVote(true);\n    toggleSortByNew(false);\n  }\n  const handleSortByNew = () => {\n    toggleSortByNew(true);\n    toggleSortByVote(false);\n  }\n\n  // Filtering posts through the search bar\n  const filterPosts = posts => {\n    if (search !== '') {\n      const regex = new RegExp(search, 'gi');\n      return posts.filter(post => {\n        return (post.title + post.desc).match(regex)\n      });\n    }\n    return posts;\n  }\n\n  // Getters\n  const getAuthor = (id) => {\n    return users.filter(user => user.id === id)[0];\n  }\n  const getVoteByPostId = post_id => {\n    return votes.filter(doc => doc.post_id === post_id)[0];\n  }\n  const getPostByVoteId = post_id => {\n    return posts.filter(doc => doc.id === post_id)[0];\n  }\n\n  return (\n    <section>\n      <div className=\"buttons mb-5\">\n        <button\n          className={`mr-5 is-small button is-primary ${sortByVote && `is-light`}`}\n          onClick={() => handleSortByVote()}\n          disabled={sortByVote}\n        >\n          Sort By Most Votes\n        </button>\n        <button\n          className={`ml-5 is-small button is-info ${sortByNew && `is-light`}`}\n          onClick={() => handleSortByNew()}\n          disabled={sortByNew}\n        >\n          Sort By New\n        </button>\n      </div>\n      <div>\n        {\n          posts ? sortByVote ? (\n            orderByVotes(posts).map(post => {\n              // vote information\n              let postVotes = {\n                voteId: '',\n                userUpvotes: [],\n                userDownvotes: [],\n                votes: 0\n              }\n              postVotes.voteId = getVoteByPostId(post.id) !== undefined && getVoteByPostId(post.id).id;\n              postVotes.votes = getVoteByPostId(post.id) !== undefined ? getVoteByPostId(post.id).votes : '0';\n              postVotes.userUpvotes = getVoteByPostId(post.id) !== undefined ? getVoteByPostId(post.id).user_upvotes : [];\n              postVotes.userDownvotes = getVoteByPostId(post.id) !== undefined ? getVoteByPostId(post.id).user_downvotes : [];\n\n              // author information\n              let author = getAuthor(post.user_id) !== undefined ? getAuthor(post.user_id) : { name: 'Anonymous', image: 'https://bulma.io/images/placeholders/96x96.png', id: 'rand0mnumb3rgen3r4t0r' }\n\n              return (\n                <PostCard\n                  key={post.id}\n                  currentUser={currentUser}\n                  post_id={post.id}\n                  user_id={post.user_id}\n                  subreddit={subreddit}\n                  url={post.url}\n                  title={post.title}\n                  desc={post.desc}\n                  updated_at={post.updated_at}\n                  author={author}\n                  postVotes={postVotes}\n                />\n              )\n            })\n          ) : (\n            filterPosts(posts).map(post => {\n              // vote information\n              let postVotes = {\n                voteId: '',\n                userUpvotes: [],\n                userDownvotes: [],\n                votes: 0\n              }\n              postVotes.voteId = getVoteByPostId(post.id) !== undefined && getVoteByPostId(post.id).id;\n              postVotes.votes = getVoteByPostId(post.id) !== undefined ? getVoteByPostId(post.id).votes : '0';\n              postVotes.userUpvotes = getVoteByPostId(post.id) !== undefined ? getVoteByPostId(post.id).user_upvotes : [];\n              postVotes.userDownvotes = getVoteByPostId(post.id) !== undefined ? getVoteByPostId(post.id).user_downvotes : [];\n\n              // author information\n              let author = getAuthor(post.user_id) !== undefined ? getAuthor(post.user_id) : { name: 'Anonymous', image: 'https://bulma.io/images/placeholders/96x96.png' }\n\n              return (\n                <PostCard\n                  key={post.id}\n                  deletePost={deletePost}\n                  currentUser={currentUser}\n                  post_id={post.id}\n                  user_id={post.user_id}\n                  subreddit={subreddit}\n                  url={post.url}\n                  title={post.title}\n                  desc={post.desc}\n                  updated_at={post.updated_at}\n                  author={author}\n                  postVotes={postVotes}\n                />\n              )\n            })\n          ) : (\n            <h1>Loading</h1>\n          )\n        }\n      </div>\n    </section>\n  )\n}\n\nPosts.propTypes = {\n  users: PropTypes.array,\n  votes: PropTypes.array,\n  deletePost: PropTypes.func.isRequired,\n  currentUser: PropTypes.object,\n  search: PropTypes.string,\n  subreddit: PropTypes.string,\n  subreddit_id: PropTypes.string,\n}\n\nexport default Posts;","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\n\nimport { connect } from 'react-redux';\nimport { createPost } from '../../actions/posts';\n\nconst PostForm = ({\n  createPost,\n  toggleShowForm,\n  subreddit\n}) => {\n  const [input, setInput] = useState({\n    title: '',\n    desc: '',\n    url: ''\n  });\n  const { title, desc, url } = input;\n\n  const handleChange = event => {\n    setInput({\n      ...input,\n      [event.target.name]: event.target.value\n    });\n  }\n\n  const handleSubmit = event => {\n    event.preventDefault();\n    let newPost = {\n      ...input,\n      subreddit_id: subreddit\n    }\n    \n    createPost(newPost);\n    setInput({\n      title: '',\n      desc: '',\n      url: ''\n    });\n    toggleShowForm(false);\n  }\n\n  return (\n    <form className=\"post-form\" onSubmit={event => handleSubmit(event)}>\n      <div className=\"field\">\n        <div className=\"control\">\n          <input\n            className=\"input\"\n            placeholder=\"Title\"\n            type=\"text\"\n            value={title}\n            name=\"title\"\n            onChange={event => handleChange(event)}\n          />\n        </div>\n      </div>\n      <div className=\"field\">\n        <div className=\"control\">\n          <textarea\n            className=\"textarea\"\n            placeholder=\"Desc\"\n            type=\"text\"\n            value={desc}\n            name=\"desc\"\n            onChange={event => handleChange(event)}\n          >\n          </textarea>\n        </div>\n      </div>\n      <div className=\"field\">\n        <div className=\"control\">\n          <input\n            className=\"input\"\n            placeholder=\"URL\"\n            type=\"text\"\n            value={url}\n            name=\"url\"\n            onChange={event => handleChange(event)}\n          />\n        </div>\n      </div>\n      <div className=\"control\">\n        <button className=\"button is-primary\">Create Post</button>\n      </div>\n    </form>\n  )\n}\n\nPostForm.propTypes = {\n  createPost: PropTypes.func.isRequired,\n  toggleShowForm: PropTypes.func,\n  subreddit: PropTypes.string.isRequired\n}\n\n// will need to know if user is authorized\nexport default connect(\n  null,\n  { createPost }\n)(PostForm);","import React, { useEffect, useState } from 'react';\nimport { useParams, useHistory } from 'react-router-dom';\nimport PropTypes from 'prop-types';\n\nimport Container from '../layout/Container';\nimport Posts from './Posts';\nimport PostForm from './PostForm';\n\nimport { connect } from 'react-redux';\nimport {\n  fetchSubreddit,\n  deleteSubreddit\n} from '../../actions/subreddits';\nimport {\n  deletePost,\n  fetchSubredditPosts\n} from '../../actions/posts';\nimport { fetchUsers } from '../../actions/users';\nimport {\n  fetchVotes\n} from '../../actions/votes';\n\n\nconst Subreddit = ({\n  fetchSubredditPosts,\n  fetchSubreddit,\n  fetchUsers,\n  fetchVotes,\n  deletePost,\n  deleteSubreddit,\n  subreddits: { subreddit, isLoading },\n  auth: { currentUser, isLoggedIn },\n  users: { users },\n  votes: { votes },\n  posts: { posts }\n}) => {\n  let name = useParams();\n  let history = useHistory();\n  useEffect(() => {\n    fetchSubreddit(name);\n    fetchUsers();\n    fetchVotes();\n  }, [\n    fetchSubreddit,\n    fetchUsers,\n    fetchVotes,\n    name\n  ]);\n  useEffect(() => {\n    if (subreddit !== null) fetchSubredditPosts(subreddit.id)\n  }, [fetchSubredditPosts, subreddit])\n  \n  // Create post form\n  let [showForm, toggleShowForm] = useState(false);\n\n  // Search form\n  let [search, setSearch] = useState('');\n  const handleChange = (event) => {\n    setSearch(event.target.value);\n  }\n\n  return (\n    <div>\n      <div className=\"hero is-success is-medium\">\n        <div className=\"hero-body\">\n          <div className=\"container\">\n            {\n              (isLoading || subreddit === null) ? (\n                <h1 className=\"title\">Loading...</h1>\n              ) : (!isLoading && Object.keys(subreddit).length === 0) ? (\n                <>\n                  <h1 className=\"is-capitalized\">\n                    This Subreddit does not exist yet\n                  </h1>\n                  <p className=\"button is-warning\">Create it Here</p>\n                </>\n              ) : (\n                <h1 className=\" title is-capitalized\">{ subreddit.name }</h1>\n              )\n            }\n            {\n              (subreddit !== null && currentUser.id === subreddit.user_id) && (\n                <button className=\"button is-danger\" onClick={() => deleteSubreddit(subreddit.id, history)}>Delete Subreddit</button>\n              )\n            }\n          </div>\n        </div>\n      </div>\n      <Container>\n        {\n          isLoggedIn && (\n            <button\n              className=\"button is-primary\"\n              onClick={() => toggleShowForm(!showForm)}\n            >\n              { showForm ? ('Hide Form') : ('Add a Post') }\n            </button>\n          )\n        }\n        {\n          showForm && (\n            <PostForm\n              toggleShowForm={toggleShowForm}\n              subreddit={subreddit.id}\n            />\n          )\n        }\n        <form className=\"form\">\n          <div className=\"control\">\n            <input\n              type=\"text\"\n              className=\"input search-box\"\n              placeholder=\"Search\"\n              value={search}\n              onChange={event => handleChange(event)}\n            />\n          </div>\n        </form>\n        {\n          (posts.length !== 0 && subreddit !== null) && (\n          <Posts\n            users={users}\n            votes={votes}\n            search={search}\n            subreddit={subreddit.name}\n            subreddit_id={subreddit.id}\n            deletePost={deletePost}\n            posts={posts}\n            currentUser={currentUser}\n          />\n        )}\n      </Container>\n    </div>\n  )\n}\n\nSubreddit.propTypes = {\n  fetchSubredditPosts: PropTypes.func.isRequired,\n  fetchSubreddit: PropTypes.func.isRequired,\n  fetchUsers: PropTypes.func.isRequired,\n  fetchVotes: PropTypes.func.isRequired,\n  deletePost: PropTypes.func.isRequired,\n  deleteSubreddit: PropTypes.func.isRequired,\n  subreddits: PropTypes.object,\n  posts: PropTypes.object,\n};\n\nconst mapStateToProps = state => ({\n  subreddits: state.subreddits,\n  posts: state.posts,\n  users: state.users,\n  votes: state.votes,\n  auth: state.auth\n})\n\nexport default connect(\n  mapStateToProps,\n  {\n    deletePost,\n    deleteSubreddit,\n    fetchUsers,\n    fetchVotes,\n    fetchSubredditPosts,\n    fetchSubreddit\n  }\n)(Subreddit);","import { format } from 'date-fns';\n\nexport default function(timeInSeconds) {\n  if (timeInSeconds === undefined) return 'New Comment!';\n  const timeInMilliseconds = timeInSeconds * 1000;\n  return format(new Date(timeInMilliseconds), 'MM-dd-yyyy HH:mm')\n}","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\n\nimport { connect } from 'react-redux';\nimport { updatePost } from '../../actions/posts';\n\nconst UpdateForm = ({\n  updatePost,\n  toggleShowForm,\n  oldTitle,\n  oldDesc,\n  oldUrl,\n  post_id\n}) => {\n  const [ input, setInput ] = useState({\n    title: oldTitle,\n    desc: oldDesc,\n    url: oldUrl\n  });\n  let { title, desc, url } = input;\n\n  const handleChange = (event) => {\n    setInput({\n      ...input,\n      [event.target.name]: event.target.value\n    });\n  }\n  const handleSubmit = event => {\n    event.preventDefault();\n    updatePost(post_id, input);\n    toggleShowForm(false);\n  }\n\n  return (\n    <form className=\"post-form\" onSubmit={event => handleSubmit(event)}>\n      <div className=\"field\">\n        <div className=\"control\">\n          <input\n            className=\"input\"\n            placeholder=\"Title\"\n            type=\"text\"\n            value={title}\n            name=\"title\"\n            onChange={event => handleChange(event)}\n          />\n        </div>\n      </div>\n      <div className=\"field\">\n        <div className=\"control\">\n          <textarea\n            className=\"textarea\"\n            placeholder=\"Desc\"\n            type=\"text\"\n            value={desc}\n            name=\"desc\"\n            onChange={event => handleChange(event)}\n          >\n          </textarea>\n        </div>\n      </div>\n      <div className=\"field\">\n        <div className=\"control\">\n          <input\n            className=\"input\"\n            placeholder=\"URL\"\n            type=\"text\"\n            value={url}\n            name=\"url\"\n            onChange={event => handleChange(event)}\n          />\n        </div>\n      </div>\n      <div className=\"control\">\n        <button className=\"button is-primary\">Update Post</button>\n      </div>\n    </form>\n  )\n}\n\nUpdateForm.propTypes = {\n  updatePost: PropTypes.func.isRequired,\n  oldTitle: PropTypes.string.isRequired,\n  toggleShowForm: PropTypes.func.isRequired,\n  oldDesc: PropTypes.string,\n  oldUrl: PropTypes.string,\n  post_id: PropTypes.string.isRequired,\n}\n\nexport default connect(\n  null,\n  { updatePost }\n)(UpdateForm);","import {\n  GET_COMMENTS,\n  ADD_COMMENT,\n  DELETE_COMMENT,\n  CLEAR_COMMENTS\n} from './types';\nimport db from '../db';\nimport firebase from '../firebase';\n\nexport const fetchAllComments = () => async dispatch => {\n  let payload = [];\n  try {\n    dispatch({ type: CLEAR_COMMENTS });\n\n    const res = await db.collection('comments').get()\n    res.forEach(doc => {\n      payload.push(doc.data());\n    });\n    payload = payload.sort((obj1, obj2) => {\n      return obj2.created_at - obj1.created_at\n    });\n\n    dispatch({\n      type: GET_COMMENTS,\n      payload\n    });\n  } catch (error) {\n    console.error(error.message);\n  }\n}\n\n\n\nexport const fetchUserComments = user_id => async dispatch => {\n  let payload = [];\n  try {\n    dispatch({ type: CLEAR_COMMENTS });\n    const res = await db.collection('comments').where('user_id', '==', user_id).get();\n    res.forEach(doc => {\n      payload.push(doc.data());\n    });\n    payload = payload.sort((obj1, obj2) => {\n      return obj2.created_at - obj1.created_at\n    });\n\n    dispatch({\n      type: GET_COMMENTS,\n      payload\n    })\n  } catch (error) {\n    \n  }\n}\n\n\nexport const fetchPostComments = post_id => async dispatch => {\n  let payload = [];\n  try {\n    dispatch({ type: CLEAR_COMMENTS });\n    const res = await db.collection('comments').where('post_id', '==', post_id).get();\n    res.forEach(doc => {\n      payload.push(doc.data());\n    });\n    payload = payload.sort((obj1, obj2) => {\n      return obj2.created_at - obj1.created_at\n    });\n\n    dispatch({\n      type: GET_COMMENTS,\n      payload\n    });\n  } catch (error) {\n    console.error(error.message);\n  }\n}\n\n\n\nexport const addComment = (body) => async dispatch => {\n  // Create an ID for the comment\n  let newDoc = db.collection('comments').doc();\n\n  // Create the newComment to be sent to the database\n  let newComment = {...body};\n  newComment.id = newDoc.id;\n  newComment.created_at = firebase.firestore.FieldValue.serverTimestamp();\n  newComment.updated_at = firebase.firestore.FieldValue.serverTimestamp();\n  try {\n    await db.collection('comments').doc(newComment.id).set(newComment);\n    dispatch({\n      type: ADD_COMMENT,\n      payload: newComment\n    });\n  } catch (error) {\n    console.error(error.message);\n  }\n}\n\n\nexport const deleteComment = (comment_id) => async dispatch => {\n  try {\n    await db.collection('comments').doc(comment_id).delete();\n    dispatch({\n      type: DELETE_COMMENT,\n      payload: comment_id\n    });\n  } catch (error) {\n    console.error(error.message);\n  }\n}","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\n\nimport { connect } from 'react-redux';\nimport { addComment } from '../../actions/comments';\n\nconst CommentForm = ({\n  currentUser,\n  subreddit_id,\n  addComment,\n  post_id\n}) => {\n  const [ input, setInput ] = useState({\n    content: ''\n  });\n  const { content } = input;\n\n  const handleChange = event => {\n    setInput({\n      ...input,\n      [event.target.name]: event.target.value\n    });\n  }\n  const handleSubmit = event => {\n    event.preventDefault();\n    let user_id = currentUser.id;\n    let newComment = {\n      ...input,\n      user_id,\n      post_id,\n      subreddit_id,\n      parent_id: null\n    }\n    addComment(newComment);\n    setInput({ content: '' })\n  }\n  return (\n    <form className=\"post-form\" onSubmit={event => handleSubmit(event)}>\n      <div className=\"field\">\n        <div className=\"control\">\n          <textarea\n            className=\"textarea\"\n            placeholder=\"Comment\"\n            value={content}\n            name=\"content\"\n            onChange={event => handleChange(event)}\n          >\n          </textarea>\n        </div>\n      </div>\n      <div className=\"control\">\n        <button className=\"button is-primary\">Comment</button>\n      </div>\n    </form>\n  )\n}\n\nCommentForm.propTypes = {\n  addComment: PropTypes.func.isRequired,\n  currentUser: PropTypes.object,\n  post_id: PropTypes.string,\n  subreddit_id: PropTypes.string,\n}\n\nexport default connect(\n  null,\n  { addComment }\n)(CommentForm);","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\n\nimport { connect } from 'react-redux';\nimport { addComment } from '../../actions/comments';\n\nconst ReplyForm = ({\n  currentUser,\n  toggleReplyForm,\n  subreddit_id,\n  comment_id,\n  addComment,\n  post_id\n}) => {\n  const [ input, setInput ] = useState({\n    content: ''\n  });\n  const { content } = input;\n\n  const handleChange = event => {\n    setInput({\n      ...input,\n      [event.target.name]: event.target.value\n    });\n  }\n  const handleSubmit = event => {\n    event.preventDefault();\n    let user_id = currentUser.id;\n    let newComment = {\n      ...input,\n      user_id,\n      post_id,\n      subreddit_id,\n      parent_id: comment_id\n    }\n    addComment(newComment);\n    setInput({ content: '' });\n    toggleReplyForm(false);\n  }\n  return (\n    <form className=\"post-form\" onSubmit={event => handleSubmit(event)}>\n      <div className=\"field\">\n        <div className=\"control\">\n          <textarea\n            className=\"textarea\"\n            placeholder=\"Reply\"\n            type=\"text\"\n            value={content}\n            name=\"content\"\n            onChange={event => handleChange(event)}\n          >\n          </textarea>\n        </div>\n      </div>\n      <div className=\"control\">\n        <button className=\"button is-primary is-small\">Comment</button>\n      </div>\n    </form>\n  )\n}\n\nReplyForm.propTypes = {\n  addComment: PropTypes.func.isRequired,\n  toggleReplyForm: PropTypes.func.isRequired,\n  currentUser: PropTypes.object,\n  post_id: PropTypes.string,\n  comment_id: PropTypes.string,\n  subreddit_id: PropTypes.string,\n}\n\nexport default connect(\n  null,\n  { addComment }\n)(ReplyForm);","import React from 'react';\nimport PropTypes from 'prop-types';\nimport commentTimeFormatter from '../../utils/commentTimeFormatter';\n\nimport { connect } from 'react-redux';\nimport { deleteComment } from '../../actions/comments';\n\nconst CommentReply = ({\n  deleteComment,\n  comment,\n  currentUser\n}) => {\n  let author = {\n    name: 'Anonymous',\n    image: 'https://bulma.io/images/placeholders/96x96.png'\n  }\n  if (comment.author !== undefined) {\n    author.name = comment.author.name;\n    author.image = comment.author.image;\n  }\n  return (\n    <div className=\"media my-2\">\n      <div className=\"media-left\">\n        <figure className=\"image\">\n          <img\n            alt=\"user avatar\"\n            src={author.image}\n          />\n        </figure>\n      </div>\n      <div className=\"media-content\">\n        <p className=\"has-text-weight-bold\">{author.name}</p>\n        <p>{comment.content}</p>\n        <div className=\"level\">\n            <div className=\"level-left\">\n              <div className=\"level-item is-size-7\">\n                <span className=\"created-at mr-2\"><span className=\"has-text-weight-bold\">Created on:</span> {commentTimeFormatter(comment.created_at.seconds)}</span>\n                <span className=\"updated-at ml-2\"><span className=\"has-text-weight-bold\">Updated on:</span> {commentTimeFormatter(comment.updated_at.seconds)}</span>\n              </div>\n            </div>\n          </div>\n      </div>\n      {\n        currentUser.id === comment.user_id && (\n          <button onClick={() => deleteComment(comment.id)} className=\"delete\">X</button>\n        )\n      }\n    </div>\n  )\n}\n\nCommentReply.propTypes = {\n  currentUser: PropTypes.object,\n  comment: PropTypes.object,\n  deleteComment: PropTypes.func.isRequired,\n}\n\nexport default connect(null, {deleteComment})(CommentReply);","import React, { useEffect, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport ReplyForm from './ReplyForm';\nimport CommentReply from './CommentReply';\nimport commentTimeFormatter from '../../utils/commentTimeFormatter';\n\nimport { connect } from 'react-redux';\nimport { fetchUsers } from '../../actions/users';\nimport { deleteComment } from '../../actions/comments';\n\nconst PostComment = ({\n  fetchUsers,\n  currentUser,\n  deleteComment,\n  users: { users },\n  auth: { isLoggedIn },\n  comment,\n  comments\n}) => {\n  useEffect(() => {\n    fetchUsers();\n  }, [fetchUsers]);\n\n  const [ replyForm, toggleReplyForm ] = useState(false);\n\n  // Get author information for the comment\n  let author;\n  const getAuthorById = user_id => {\n    return users.filter(user => user.id === user_id);\n  }\n\n  if (users.length !== 0) {\n    author = getAuthorById(comment.user_id)[0];\n  }\n\n  // Find children comments of the parent comment\n  let childrenComments = [];\n  const getChildrenComments = parent_id => {\n    let tempChildrenComments = comments.filter(comment => comment.parent_id === parent_id);\n    tempChildrenComments.map(comment => {\n      comment.author = users.filter(user => user.id === comment.user_id)[0];\n    });\n    return tempChildrenComments;\n  }\n  childrenComments = getChildrenComments(comment.id);\n\n  return (\n    <div className=\"comment my-2\">\n      <div className=\"media\">\n        <div className=\"media-left\">\n          <figure className=\"image\">\n            <img\n              alt=\"Author avatar\"\n              src={ author !== undefined && author.image }\n            />\n          </figure>\n        </div>\n        <div className=\"media-content\">\n          <p className=\"has-text-weight-bold\">\n            { author !== undefined && author.name }\n          </p>\n          <p>\n            { comment.content }\n          </p>\n          <div className=\"level\">\n            <div className=\"level-left\">\n              <div className=\"level-item is-size-7\">\n                <span className=\"created-at mr-2\"><span className=\"has-text-weight-bold\">Created on:</span> {commentTimeFormatter(comment.created_at.seconds)}</span>\n                <span className=\"updated-at ml-2\"><span className=\"has-text-weight-bold\">Updated on:</span> {commentTimeFormatter(comment.updated_at.seconds)}</span>\n              </div>\n            </div>\n          </div>\n          {\n            isLoggedIn && (\n              <button className=\"button is-primary is-small\" onClick={() => toggleReplyForm(!replyForm)}>Reply</button>\n            )\n          }\n          {\n            replyForm && (\n              <div className=\"media\">\n                  <div className=\"media-content\">\n                    <ReplyForm\n                      currentUser={currentUser}\n                      subreddit_id={comment.subreddit_id}\n                      comment_id={comment.id}\n                      post_id={comment.post_id}\n                      toggleReplyForm={toggleReplyForm}\n                    />\n                  </div>\n              </div>\n            )\n          }\n          {\n            ( childrenComments.length !== 0 && childrenComments[0].author !== undefined) && (\n              childrenComments.map(comment => {\n                return (\n                  <CommentReply\n                    key={comment.id}\n                    comment={comment}\n                    currentUser={currentUser}\n                  />\n                )\n              })\n            )\n          }\n        </div>\n        {\n          currentUser.id === comment.user_id && (\n            <div className=\"media-right\">\n              <button className=\"delete\" onClick={() => deleteComment(comment.id)}>X</button>\n            </div>\n          )\n        }\n      </div>\n    </div>\n  )\n}\n\nPostComment.propTypes = {\n  fetchUsers: PropTypes.func.isRequired,\n  users: PropTypes.object,\n  comment: PropTypes.object.isRequired,\n  currentUser: PropTypes.object,\n  deleteComment: PropTypes.func.isRequired,\n}\n\nconst mapStateToProps = state => ({\n  users: state.users,\n  auth: state.auth\n});\n\nexport default connect(\n  mapStateToProps,\n  {\n    fetchUsers,\n    deleteComment\n  }\n)(PostComment);","import React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { useParams, Link } from 'react-router-dom';\nimport commentTimeFormatter from '../../utils/commentTimeFormatter';\n\nimport Container from '../layout/Container';\nimport UpdateForm from './UpdateForm';\nimport CommentForm from './CommentForm';\nimport PostComment from './PostComment';\n\nimport { connect } from 'react-redux';\nimport { fetchPost } from '../../actions/posts';\nimport { fetchSubreddits } from '../../actions/subreddits';\nimport { fetchPostComments } from '../../actions/comments';\nimport { fetchUsers } from '../../actions/users';\nimport {\n  fetchPostVote,\n  upvote, \n  downvote\n} from '../../actions/votes';\n\nconst Post = ({\n  fetchPost,\n  fetchUsers,\n  fetchPostVote,\n  fetchSubreddits,\n  fetchPostComments,\n  upvote,\n  downvote,\n  votes: { vote },\n  posts: { post },\n  users: { users },\n  auth: { currentUser },\n  subreddits: { subreddits },\n  comments: { comments }\n}) => {\n  const { post_id, name } = useParams();\n  useEffect(() => {\n    fetchPost(post_id);\n    fetchSubreddits();\n    fetchPostComments(post_id);\n    fetchUsers();\n    fetchPostVote(post_id);\n  }, [\n    fetchSubreddits,\n    fetchPostComments,\n    fetchPostVote,\n    fetchUsers,\n    fetchPost,\n    post_id\n  ]);\n  const [ showForm, toggleShowForm ] = useState( false );\n\n  const fetchSubredditByName = (sub_name) => {\n    return subreddits.filter(subreddit => subreddit.name === sub_name)[0];\n  }\n  let subreddit_id = '';\n  if (subreddits.length !== 0) {\n    subreddit_id = fetchSubredditByName(name).id;\n  }\n\n  const fetchAuthorById = user_id => {\n    return users.filter(user => user.id === user_id)[0];\n  }\n  let author = {\n    name: 'Anonymous',\n    image: 'https://bulma.io/images/placeholders/96x96.png',\n    id: 'rand0mnumb3rgen3r4t0r'\n  };\n  if (post !== null) {\n    author = fetchAuthorById(post.user_id);\n  }\n\n  return (\n    <section>\n      <div className=\"hero is-warning\">\n        <div className=\"hero-head mt-3\" style={{ marginLeft: 'auto', marginRight: 'auto' }}>\n        <button\n          className={`button is-success is-small ${vote !== null && vote.user_upvotes.indexOf(currentUser.id) !== -1 && 'is-light'}`}\n          disabled={Object.entries(currentUser).length === 0}\n          onClick={() => upvote(vote.id, post_id, currentUser.id, true)}\n        >\n          Upvote\n        </button>\n        { vote !== null && <span className=\"mx-3\">{vote.votes}</span>}\n          <button\n            className={`button is-danger is-small ${vote !== null && vote.user_downvotes.indexOf(currentUser.id) !== -1 && 'is-light'}`}\n            disabled={Object.entries(currentUser).length === 0}\n            onClick={() => downvote(vote.id, post_id, currentUser.id, true)}\n          >\n            Downvote\n          </button>\n        </div>\n        <div className=\"hero-body has-text-centered\">\n          {\n            (post !== null && post.url) && (\n              <figure className=\"image\" style={{ margin: '0 auto', width: '35vw' }}>\n                <img\n                  src={post.url}\n                  alt=\"\"\n                />\n              </figure>\n            )\n          }\n          <h1 className=\"title\">\n            { post !== null && post.title }\n          </h1>\n          {\n            (post !== null && post.desc) && (\n              <h2 className=\"subtitle\">\n                { post.desc }\n              </h2>\n            )\n          }\n        </div>\n        <div className=\"hero-foot mb-3\">\n          <div className=\"level is-size-6\">\n            <div className=\"level-item has-text-centered\">\n              <figure className=\"image is-24x24 mr-2\" style={{ marginBottom: 0 }}>\n                <img\n                  className=\"is-rounded\"\n                  src={author.image}\n                  alt=\"\"\n                />\n              </figure>\n              <Link to={`/u/${author.id}`}>\n                <p>\n                  {author.name}\n                </p>\n              </Link>\n            </div>\n            <div className=\"level-item has-text-centered\">\n              <p>\n                Created: { post !== null && commentTimeFormatter(post.created_at.seconds) }\n              </p>\n            </div>\n            <div className=\"level-item has-text-centered\">\n              <p>\n                Updated: { post !== null && commentTimeFormatter(post.updated_at.seconds) }\n              </p>\n            </div>\n          </div>\n        </div>\n      </div>\n      <Container>\n        {\n          (post !== null && currentUser.id === post.user_id) && (\n            <button\n              className=\"button is-success\"\n              onClick={() => toggleShowForm(!showForm)}\n            >\n              {showForm ? 'Close Form' : 'Edit Post'}\n            </button>\n          )\n        }\n        {\n          (showForm && post !== null) && (\n            <UpdateForm\n              oldTitle={post.title}\n              oldDesc={post.desc}\n              oldUrl={post.url}\n              post_id={post.id}\n              toggleShowForm={toggleShowForm}\n            />\n          )\n        }\n        <div className=\"comments\">\n          {\n            (comments.length !== 0) && (\n              comments.map(comment => {\n                if (comment.parent_id === null) {\n                  return (\n                    <PostComment\n                      comment={comment}\n                      comments={comments}\n                      currentUser={currentUser}\n                      key={comment.id}\n                    />\n                  )\n                }\n              })\n            )\n          }\n          <div className=\"mt-3 comment-form\">\n            <h2 className=\"subtitle\">Add a Comment</h2>\n            <CommentForm\n              currentUser={currentUser}\n              post_id={post_id}\n              name={name}\n              subreddit_id={subreddit_id}\n            />\n          </div>\n        </div>\n      </Container>\n    </section>\n  )\n}\n\nPost.propTypes = {\n  fetchSubreddits: PropTypes.func.isRequired,\n  fetchPost: PropTypes.func.isRequired,\n  fetchUsers: PropTypes.func.isRequired,\n  fetchPostVote: PropTypes.func.isRequired,\n  fetchPostComments: PropTypes.func.isRequired,\n  subreddits: PropTypes.object,\n  comments: PropTypes.object,\n  posts: PropTypes.object,\n  votes: PropTypes.object,\n  upvote: PropTypes.func.isRequired,\n  downvote: PropTypes.func.isRequired,\n}\n\nconst mapStateToProps = state => ({\n  subreddits: state.subreddits,\n  comments: state.comments,\n  users: state.users,\n  posts: state.posts,\n  auth: state.auth,\n  votes: state.votes\n})\n\nexport default connect(\n  mapStateToProps,\n  {\n    fetchPost,\n    fetchUsers,\n    fetchPostVote,\n    fetchSubreddits,\n    fetchPostComments,\n    upvote,\n    downvote\n  }\n)(Post);","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport PropTypes from 'prop-types';\n\nconst UserPost = ({\n  post,\n  user,\n  subreddit,\n  currentUser,\n  vote_id,\n  deletePost\n}) => {\n  return (\n    <div className=\"box\">\n      <div key={post.id} className=\"media\">\n      { \n          post.url && (\n            <div className=\"media-left\">\n              <figure className=\"image is-64x64\">\n                <img\n                  src={ post.url }\n                  alt={ post.title }\n                />\n              </figure>\n            </div>\n          )\n        }\n        <div className=\"media-content\">\n          <p className=\"has-text-weight-bold\">\n            { subreddit !== undefined && <Link to={`/r/${subreddit.name}/${post.id}`}>{post.title}</Link> }\n          </p>\n          {\n            post.desc && (\n              <p>\n                {post.desc}\n              </p>\n            )\n          }\n          <div className=\"level\">\n            <div className=\"level-left\">\n              <div className=\"level-item\">\n                <p className=\"is-size-7\">\n                  { subreddit !== undefined && <Link to={`/r/${subreddit.name}`}>{subreddit.name}</Link> }\n                </p>\n              </div>\n            </div>\n          </div>\n        </div>\n        {\n          (user !== null && user.id === currentUser.id) && (\n            <div className=\"media-right\">\n              <button\n                className=\"delete\"\n                onClick={() => deletePost(post.id, vote_id)}\n              >\n                X\n              </button>\n            </div>\n          )\n        }\n      </div>\n    </div>\n  )\n}\n\nUserPost.propTypes = {\n  post: PropTypes.object,\n  user: PropTypes.object,\n  subreddit: PropTypes.string,\n  currentUser: PropTypes.object,\n  vote_id: PropTypes.string,\n  deletePost: PropTypes.func,\n}\n\nexport default UserPost;","import React from 'react';\nimport PropTypes from 'prop-types';\nimport commentTimeFormatter from '../../utils/commentTimeFormatter';\n\nconst UserComment = ({\n  comment,\n  user,\n  currentUser,\n  deleteComment\n}) => {\n  return (\n    <div key={comment.id} className=\"box\">\n      <div className=\"media\">\n        <div className=\"media-left\">\n          <figure className=\"image is-64x64\">\n            <img\n              src={ user.image }\n              alt='user avatar'\n            />\n          </figure>\n        </div>\n        <div className=\"media-content\">\n          <p className=\"has-text-weight-bold\">\n            { user.name }\n          </p>\n          <p>\n            { comment.content }\n          </p>\n          <div className=\"level\">\n            <div className=\"level-left\">\n              <div className=\"level-item is-size-7\">\n                <span className=\"created-at mr-2\"><span className=\"has-text-weight-bold\">Created on:</span> {commentTimeFormatter(comment.created_at.seconds)}</span>\n                <span className=\"updated-at ml-2\"><span className=\"has-text-weight-bold\">Updated on:</span> {commentTimeFormatter(comment.updated_at.seconds)}</span>\n              </div>\n            </div>\n          </div>\n        </div>\n        {\n          (user !== null && user.id === currentUser.id) && (\n            <div className=\"media-right\">\n              <button\n                className=\"delete\"\n                onClick={() => deleteComment(comment.id)}\n              >\n                X\n              </button>\n            </div>\n          )\n        }\n      </div>\n    </div>\n  )\n}\n\nUserComment.propTypes = {\n  comment: PropTypes.object,\n  user: PropTypes.object,\n  currentUser: PropTypes.object,\n  deleteComment: PropTypes.func,\n}\n\nexport default UserComment;","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\n\nconst UpdateUserForm = ({\n  updateUser,\n  toggleUpdateUserForm,\n  user\n}) => {\n  const [ input, setInput ] = useState({\n    name: user.name,\n    bio: user.bio,\n    image: user.image\n  });\n  let { name, bio, image } = input;\n\n  const handleChange = (event) => {\n    setInput({\n      ...input,\n      [event.target.name]: event.target.value\n    });\n  }\n  const handleSubmit = event => {\n    event.preventDefault();\n    let updatedUser = {...input};\n    updatedUser.id = user.id;\n    updateUser(updatedUser);\n    toggleUpdateUserForm(false);\n  }\n\n  return (\n    <form className=\"post-form\" onSubmit={event => handleSubmit(event)}>\n      <div className=\"field\">\n        <div className=\"control\">\n          <input\n            className=\"input\"\n            placeholder=\"Name\"\n            type=\"text\"\n            value={name}\n            name=\"name\"\n            onChange={event => handleChange(event)}\n            disabled\n          />\n        </div>\n      </div>\n      <div className=\"field\">\n        <div className=\"control\">\n          <textarea\n            className=\"textarea\"\n            placeholder=\"Bio\"\n            type=\"text\"\n            value={bio}\n            name=\"bio\"\n            onChange={event => handleChange(event)}\n          >\n          </textarea>\n        </div>\n      </div>\n      <div className=\"field\">\n        <div className=\"control\">\n          <input\n            className=\"input\"\n            placeholder=\"Image\"\n            type=\"text\"\n            value={image}\n            name=\"image\"\n            onChange={event => handleChange(event)}\n            disabled\n          />\n        </div>\n      </div>\n      <div className=\"control\">\n        <button className=\"button is-primary\">Update User</button>\n      </div>\n    </form>\n  )\n}\n\nUpdateUserForm.propTypes = {\n  updateUser: PropTypes.func.isRequired,\n  toggleUpdateUserForm: PropTypes.func.isRequired,\n  user: PropTypes.object,\n}\n\nexport default UpdateUserForm;","import React, { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport PropTypes from 'prop-types';\n\nimport Container from '../layout/Container';\nimport UserPost from './UserPost';\nimport UserComment from './UserComment';\nimport UpdateUserForm from './UpdateUserForm';\n\nimport { connect } from 'react-redux';\nimport { fetchVotes } from '../../actions/votes';\nimport { fetchUser, updateUser } from '../../actions/users';\nimport { fetchSubreddits } from '../../actions/subreddits';\nimport { deletePost, fetchUserPosts } from '../../actions/posts';\nimport { deleteComment, fetchUserComments } from '../../actions/comments';\n\nconst User = ({\n  deletePost,\n  deleteComment,\n  fetchUser,\n  updateUser,\n  fetchVotes,\n  fetchUserPosts,\n  fetchUserComments,\n  fetchSubreddits,\n  posts: { posts, isLoading },\n  comments: { comments },\n  users: { user },\n  auth: { currentUser },\n  subreddits: { subreddits },\n  votes: { votes }\n}) => {\n  const { user_id } = useParams();\n  useEffect(() => {\n    fetchUser(user_id);\n    fetchUserPosts(user_id);\n    fetchUserComments(user_id);\n    fetchSubreddits();\n    fetchVotes();\n  }, [\n    fetchUserPosts,\n    fetchSubreddits,\n    fetchUserComments,\n    fetchVotes,\n    fetchUser,\n    user_id\n  ]);\n  const [ userPostList, toggleUserPostList ] = useState(true);\n  const [ userCommentList, toggleUserCommentList ] = useState(false);\n  const [ updateUserForm, toggleUpdateUserForm ] = useState(false);\n\n  const getSubredditById = subreddit_id => {\n    return subreddits.filter(subreddit => subreddit.id === subreddit_id)[0];\n  }\n  const getVoteIdByPost = post_id => {\n    return votes.filter(vote => vote.post_id === post_id)[0];\n  }\n\n  const handlePostList = () => {\n    toggleUserPostList(true);\n    toggleUserCommentList(false);\n  }\n  const handleCommentList = () => {\n    toggleUserCommentList(true);\n    toggleUserPostList(false);\n  }\n\n  return (\n    <Container>\n      <div className=\"hero is-primary mb-5\">\n        <div className=\"hero-body\">\n          <div className=\"container has-text-centered\">\n            <figure className=\"image is-128x128\" style={{ margin: '0 auto' }}>\n              <img src={ (user !== null && user.image) && user.image } alt=\"User avatar\" />\n            </figure>\n            <h1 className=\"title\">\n              { user !== null && user.name }\n            </h1>\n            {\n              (user !== null && user.bio !== '') && (\n                <h2 className=\"subtitle\">{user.bio}</h2>\n              )\n            }\n          </div>\n        </div>\n      </div>\n      {\n        (user !== null && user.id === currentUser.id) && (\n          <button\n            className=\"button is-small is-primary\"\n            onClick={() => toggleUpdateUserForm(!updateUserForm)}\n          >\n            {updateUserForm ? 'Close Form' : 'Update User'}\n          </button>\n        )\n      }\n      {\n        (user !== null && updateUserForm) && (\n          <UpdateUserForm\n            user={user}\n            updateUser={updateUser}\n            toggleUpdateUserForm={toggleUpdateUserForm}\n          />\n        )\n      }\n      <div className=\"buttons my-2\">\n        <button\n          className={`button is-info ${userPostList && 'is-light'}`}\n          disabled={userPostList}\n          onClick={() => handlePostList()}\n        >\n          User Posts\n        </button>\n        <button\n          className={`button is-warning ${userCommentList && 'is-light'}`}\n          disabled={userCommentList}\n          onClick={() => handleCommentList()}\n        >\n          User Comments\n        </button>\n      </div>\n      {\n        userPostList && (\n          <div className=\"user-posts\">\n            {\n              (posts.length !== 0 && !isLoading) && (\n                posts.map(post => {\n                  let vote_id = getVoteIdByPost(post.id);\n                  let subreddit = getSubredditById(post.subreddit_id);\n                  return (\n                    <UserPost\n                      vote_id={vote_id}\n                      subreddit={subreddit}\n                      currentUser={currentUser}\n                      deletePost={deletePost}\n                      user={user}\n                      post={post}\n                    />\n                  )\n                })\n              )\n            }\n          </div>\n        )\n      }\n      {\n        userCommentList && (\n          <div className=\"user-comments\">\n            {\n              (comments.length !== 0 && !isLoading) && (\n                comments.map(comment => {\n                  return (\n                    <UserComment\n                      comment={comment}\n                      user={user}\n                      currentUser={currentUser}\n                      deleteComment={deleteComment}\n                    />\n                  )\n                })\n              )\n            }\n          </div>\n        )\n      }\n    </Container>\n  )\n}\n\nUser.propTypes = {\n  deletePost: PropTypes.func.isRequired,\n  deleteComment: PropTypes.func.isRequired,\n  fetchUserPosts: PropTypes.func.isRequired,\n  fetchUser: PropTypes.func.isRequired,\n  updateUser: PropTypes.func.isRequired,\n  fetchVotes: PropTypes.func.isRequired,\n  fetchSubreddits: PropTypes.func.isRequired,\n  fetchUserComments: PropTypes.func.isRequired,\n  users: PropTypes.object,\n  auth: PropTypes.object,\n  posts: PropTypes.object,\n  votes: PropTypes.object,\n  comments: PropTypes.array,\n  subreddits: PropTypes.object,\n}\n\nconst mapStateToProps = state => ({\n  users: state.users,\n  auth: state.auth,\n  posts: state.posts,\n  votes: state.votes,\n  subreddits: state.subreddits,\n  comments: state.comments\n});\n\nexport default connect(\n  mapStateToProps,\n  {\n    deletePost,\n    deleteComment,\n    fetchUser,\n    updateUser,\n    fetchVotes,\n    fetchUserPosts,\n    fetchSubreddits,\n    fetchUserComments\n  }\n)(User)","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport PropTypes from 'prop-types';\n\nconst SubCard = ({\n  subreddit,\n  post\n}) => {\n  return (\n    <div className=\"column is-4 post-column\">\n      <div className=\"card\">\n        <div className=\"card-header\">\n          <p className=\"is-capitalized card-header-title\">\n            <Link to={`/r/${subreddit.name}`}>{subreddit.name}</Link>\n          </p>\n        </div>\n        <div className=\"card-content\">\n          <div className=\"media\">\n            <div className=\"media-left\">\n              <figure className=\"image is-96x96\">\n                <img src={ post.url ? post.url : \"https://bulma.io/images/placeholders/96x96.png\" } alt=\"\" />\n              </figure>\n            </div>\n            <div className=\"media-content\">\n              <p className=\"title is-4\">\n                <Link to={`/r/${subreddit.name}/${post.id}`}>{post.title}</Link>\n              </p>\n            </div>\n          </div>\n          {post.desc && (\n            <div className=\"content\">\n              {post.desc}\n            </div>\n          )}\n        </div>\n      </div>\n    </div>\n  )\n}\n\nSubCard.propTypes = {\n  subreddit: PropTypes.object,\n  post: PropTypes.object,\n}\n\nexport default SubCard;","import React, { useEffect } from 'react';\nimport PropTypes from 'prop-types';\n\nimport Container from '../layout/Container';\nimport SubCard from './SubCard';\n\nimport { connect } from 'react-redux';\nimport { fetchSubreddits } from '../../actions/subreddits';\nimport { fetchAllPosts } from '../../actions/posts';\n\nconst Subreddits = ({\n  fetchSubreddits,\n  fetchAllPosts,\n  posts: { posts },\n  subreddits: { subreddits }\n}) => {\n  useEffect(() => {\n    fetchSubreddits();\n    fetchAllPosts();\n  }, [\n    fetchSubreddits,\n    fetchAllPosts\n  ]);\n  const findFirstPostOfSub = subreddit_id => {\n    return posts.filter(post => post.subreddit_id === subreddit_id)[0];\n  }\n  return (\n    <section>\n      <div className=\"hero is-warning is-medium\">\n        <div className=\"hero-body\">\n          <div className=\"container\">\n            <h1 className=\"title\">\n              Subreddits\n            </h1>\n            <h2>\n              See the latest from each Subreddit\n            </h2>\n          </div>\n        </div>\n      </div>\n      <Container>\n        <div className=\"columns is-multiline is-4\">\n          {\n            subreddits.length !== 0 && (\n              subreddits.map(sub => {\n                let post = findFirstPostOfSub(sub.id);\n                if (post === undefined) {\n                  post = {\n                    title: 'Nothing here yet!',\n                    url: 'https://bulma.io/images/placeholders/96x96.png',\n                    user_id: 'none',\n                    subreddit_id: sub.id,\n                    id: 'none',\n                    desc: 'Be the first to post in this subreddit!',\n                    created_at: {\n                      seconds: 0,\n                      nanoseconds: 0\n                    },\n                    updated_at: {\n                      seconds: 0,\n                      nanoseconds: 0\n                    }\n                  };\n                }\n                return (\n                  <SubCard\n                    key={sub.id}\n                    subreddit={sub}\n                    post={post}\n                  />\n                )\n              })\n            )\n          }\n        </div>\n      </Container>\n    </section>\n  )\n}\n\nSubreddits.propTypes = {\n  fetchSubreddits: PropTypes.func.isRequired,\n  fetchAllPosts: PropTypes.func.isRequired,\n  subreddits: PropTypes.object,\n  posts: PropTypes.object,\n}\n\nconst mapStateToProps = state => {\n  return {\n    subreddits: state.subreddits,\n    posts: state.posts\n  }\n}\n\nexport default connect(\n  mapStateToProps,\n  {\n    fetchSubreddits,\n    fetchAllPosts\n  }\n)(Subreddits);","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { useHistory } from 'react-router-dom';\n\nimport Container from '../layout/Container';\n\nimport { connect } from 'react-redux';\nimport { createSubreddit } from '../../actions/subreddits';\n\nconst CreateSubreddit = ({\n  createSubreddit,\n  auth: { currentUser }\n}) => {\n  const [ input, setInput ] = useState({\n    name: '',\n    desc: ''\n  });\n  const { name, desc } = input;\n  let history = useHistory();\n\n  const handleChange = event => {\n    setInput({\n      ...input,\n      [event.target.name]: event.target.value\n    })\n  }\n  const handleSubmit = event => {\n    event.preventDefault();\n    // Get currentUser.id\n    let user_id = currentUser.id;\n    let name = input.name.toLowerCase();\n    name = name.replaceAll(/\\W/g, '')\n\n\n    let newSubreddit = {\n      name,\n      desc: input.desc,\n      user_id\n    }\n\n    createSubreddit(newSubreddit, history);\n    setInput({\n      name: '',\n      desc: ''\n    });\n  }\n  return (\n    <Container>\n      <h1 className=\"has-text-centered is-title\">Create a Subreddit</h1>\n      <form className=\"create-sub-form\" onSubmit={(event) => handleSubmit(event)}>\n        <div className=\"field\">\n          <div className=\"control\">\n            <label className=\"label\">Name</label>\n            <input\n              className=\"input\"\n              type=\"text\"\n              name=\"name\"\n              value={name}\n              placeholder=\"Name the Subreddit\"\n              onChange={event => handleChange(event)}\n              maxLength=\"20\"\n            />\n          </div>\n        </div>\n        <div className=\"field\">\n          <div className=\"control\">\n            <label className=\"label\">Description</label>\n            <textarea\n              className=\"textarea\"\n              type=\"textarea\"\n              name=\"desc\"\n              value={desc}\n              placeholder=\"Describe the Subreddit\"\n              onChange={event => handleChange(event)}\n              maxLength=\"140\"\n            >\n            </textarea>\n          </div>\n        </div>\n        <div className=\"control\">\n          <button className=\"button is-primary\">Create Subreddit</button>\n        </div>\n      </form>\n    </Container>\n  )\n}\n\nCreateSubreddit.propTypes = {\n  auth: PropTypes.object,\n  createSubreddit: PropTypes.func.isRequired,\n}\n\nconst mapStateToProps = state => ({\n  auth: state.auth\n});\n\nexport default connect(\n  mapStateToProps,\n  {\n    createSubreddit\n  }\n)(CreateSubreddit);","import {\n  GET_USERS,\n  GET_USER,\n  UPDATE_USER,\n  CLEAR_USER\n} from '../actions/types';\n\nconst initialState = {\n  users: [],\n  user: null,\n  isLoading: true\n}\n\nexport default function(state = initialState, action) {\n  const { type, payload } = action;\n  switch(type) {\n    case GET_USERS:\n      return {\n        ...state,\n        users: [...payload],\n        isLoading: false\n      }\n    case GET_USER:\n      return {\n        ...state,\n        isLoading: false,\n        user: payload\n      }\n    case UPDATE_USER:\n      return {\n        ...state,\n        isLoading: false,\n        user: payload\n      }\n    case CLEAR_USER:\n      return {\n        ...state,\n        isLoading: false,\n        user: null\n      }\n    default:\n      return state;\n  }\n}","import {\n  LOGIN_USER,\n  LOGOUT_USER,\n  GET_CURRENT_USER,\n  LOGIN_FAIL\n} from '../actions/types';\n\nconst initialState = {\n  currentUser: {},\n  isLoggedIn: false,\n  isLoading: true\n}\n\nexport default function(state = initialState, action) {\n  const { type, payload } = action;\n  switch(type) {\n    case LOGIN_USER:\n    case GET_CURRENT_USER:\n      return {\n        ...state,\n        currentUser: {...payload},\n        isLoggedIn: true,\n        isLoading: false\n      };\n    case LOGOUT_USER:\n    case LOGIN_FAIL:\n      return {\n        ...state,\n        currentUser: {},\n        isLoggedIn: false,\n        isLoading: false\n      }\n    default:\n      return state;\n  }\n}","import {\n  GET_POSTS,\n  GET_POST,\n  CREATE_POST,\n  UPDATE_POST,\n  DELETE_POST,\n  CLEAR_POST,\n  CLEAR_POSTS\n} from '../actions/types';\n\nconst initialState = {\n  posts: [],\n  post: null,\n  isLoading: true\n}\n\nexport default function(state = initialState, action) {\n  const { type, payload } = action;\n  switch(type) {\n    case GET_POSTS:\n      return {\n        ...state,\n        isLoading: false,\n        posts: [...payload]\n      }\n    case GET_POST:\n      return {\n        ...state,\n        isLoading: false,\n        post: payload\n      }\n    case CREATE_POST:\n      return {\n        ...state,\n        isLoading: false,\n        posts: [payload, ...state.posts]\n      }\n    case UPDATE_POST:\n      // go through state.posts and filter out the post with post.id === payload.id\n      let updatedPosts = state.posts.filter(post => post.id !== payload.id);\n\n      return {\n        ...state,\n        isLoading: false,\n        posts: [...updatedPosts, payload],\n        post: payload\n      }\n    case DELETE_POST:\n      // go through state.posts and filter out the posts with post.id === payload\n      let newPosts = state.posts.filter(post => post.id !== payload);\n\n      return {\n        ...state,\n        isLoading: false,\n        posts: [...newPosts]\n      }\n    case CLEAR_POST:\n      return {\n        ...state,\n        isLoading: false,\n        post: null\n      }\n    case CLEAR_POSTS:\n      return {\n        ...state,\n        isLoading: false,\n        posts: []\n      }\n    default:\n      return state;\n  }\n}","import {\n  GET_SUBREDDITS,\n  GET_SUBREDDIT,\n  CREATE_SUBREDDIT,\n  UPDATE_SUBREDDIT,\n  DELETE_SUBREDDIT,\n  CLEAR_SUBREDDIT\n} from '../actions/types';\n\nconst initialState = {\n  subreddits: [],\n  subreddit: null,\n  isLoading: true\n};\n\nexport default function(state = initialState, action) {\n  const { type, payload } = action;\n  switch(type) {\n    case GET_SUBREDDITS:\n      return {\n        ...state,\n        subreddits: payload,\n        isLoading: false\n      }\n    case GET_SUBREDDIT:\n      return {\n        ...state,\n        subreddit: payload,\n        isLoading: false\n      }\n    case CREATE_SUBREDDIT:\n      return {\n        ...state,\n        isLoading: false,\n        subreddits: [...state.subreddits, payload]\n      }\n    case UPDATE_SUBREDDIT:\n      const updatedSubreddits = state.subreddits.filter(subreddit => subreddit.id !== payload.id);\n      return {\n        ...state,\n        isLoading: false,\n        subreddits: [...updatedSubreddits, payload]\n      }\n    case DELETE_SUBREDDIT:\n      const deletedSubreddits = state.subreddits.filter(subreddit => subreddit.id !== payload);\n      return {\n        ...state,\n        isLoading: false,\n        subreddits: [...deletedSubreddits]\n      }\n    case CLEAR_SUBREDDIT:\n      return {\n        ...state,\n        subreddit: null,\n        isLoading: false\n      }\n    default:\n      return state;\n  }\n}","import {\n  GET_COMMENTS,\n  ADD_COMMENT,\n  DELETE_COMMENT,\n  CLEAR_COMMENTS\n} from '../actions/types';\n\nconst initialState = {\n  comments: [],\n  isLoading: true\n};\n\nexport default function(state = initialState, action) {\n  const { type, payload } = action;\n\n  switch(type) {\n    case GET_COMMENTS:\n      return {\n        ...state,\n        isLoading: false,\n        comments: payload\n      }\n    case ADD_COMMENT:\n      return {\n        ...state,\n        isLoading: false,\n        comments: [...state.comments, payload]\n      }\n    case DELETE_COMMENT:\n      let deleteComment = state.comments.filter(comment => comment.id !== payload);\n      return {\n        ...state,\n        isLoading: false,\n        comments: [...deleteComment]\n      }\n    case CLEAR_COMMENTS:\n      return {\n        ...state,\n        isLoading: false,\n        comments: []\n      }\n    default:\n      return state;\n  }\n}","import {\n  GET_VOTES,\n  GET_VOTE,\n  ADD_VOTE,\n  ADD_VOTES,\n  REMOVE_VOTE,\n  DELETE_VOTE,\n  CLEAR_VOTE\n} from '../actions/types';\n\nconst initialState = {\n  votes: [],\n  vote: null,\n  isLoading: true\n}\n\nexport default function(state = initialState, action) {\n  const { type, payload } = action;\n  switch(type) {\n    case GET_VOTES:\n      return {\n        ...state,\n        votes: [...payload],\n        isLoading: false\n      }\n    case GET_VOTE:\n      return {\n        ...state,\n        vote: payload,\n        isLoading: false\n      }\n    case ADD_VOTES:\n      return {\n        ...state,\n        votes: [...state.votes, payload],\n        isLoading: false\n      }\n    case ADD_VOTE:\n      // filter out the vote object that contains matching post_id\n      let addVote = state.votes.filter(vote => vote.id !== payload.id);\n\n      // then insert the payload object\n      return {\n        ...state,\n        votes: [...addVote, payload],\n        isLoading: false\n      }\n    case REMOVE_VOTE:\n      // filter out the vote object that contains matching post_id\n      let removeVote = state.votes.filter(vote => vote.id !== payload.id);\n\n      // then insert the payload object\n      return {\n        ...state,\n        votes: [...removeVote, payload],\n        isLoading: false\n      }\n    case DELETE_VOTE:\n      let deleteVote = state.votes.filter(vote => vote.id !== payload);\n\n      return {\n        ...state,\n        isLoading: false,\n        votes: [...deleteVote]\n      }\n    case CLEAR_VOTE:\n      return {\n        ...state,\n        isLoading: false,\n        vote: null\n      }\n    default:\n      return state;\n  }\n}","import { combineReducers } from 'redux';\n\nimport users from './users';\nimport auth from './auth';\nimport posts from './posts';\nimport subreddits from './subreddits';\nimport comments from './comments';\nimport votes from './votes';\n\n/* root reducer */\nexport default combineReducers({\n  users,\n  auth,\n  posts,\n  subreddits,\n  comments,\n  votes\n});","import { composeWithDevTools } from 'redux-devtools-extension';\nimport { createStore, applyMiddleware } from 'redux';\nimport rootReducer from './reducers';\nimport thunk from 'redux-thunk';\n\nconst initialState = {};\nconst middleware = [thunk];\n\n/* createStore( reducer, initState, middleware ) */\nconst store = createStore(\n  rootReducer,\n  initialState,\n  composeWithDevTools(applyMiddleware(...middleware))\n)\n\nexport default store;","/*\n\nTODOS:\n= Create Subreddit page\n\n*/\n\nimport React, { useEffect } from 'react';\nimport 'bulma/css/bulma.css';\nimport './App.scss';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route\n} from 'react-router-dom';\nimport firebase from './firebase';\n\nimport Header from './components/layout/Header';\nimport Footer from './components/layout/Footer';\nimport PrivateRoute from './components/routing/PrivateRoute';\n\nimport Index from './components/homepage/Index';\nimport Subreddit from './components/subreddit/Subreddit';\nimport Post from './components/post/Post';\nimport User from './components/user/User';\nimport Subreddits from './components/subreddits/Subreddits';\nimport CreateSubreddit from './components/createSubreddit/CreateSubreddit';\n\nimport store from './store';\nimport { getUser, userError } from './actions/auth';\n\nfunction App() {\n  // check if a user is logged in throughout\n  useEffect(() => {\n    firebase.auth().onAuthStateChanged(user => {\n      // if a user exists, update the store with user information\n      if (user) {\n        let setUser = {\n          name: user.displayName,\n          id: user.uid,\n          image: user.photoURL\n        }\n        store.dispatch(getUser(setUser));\n      } else {\n        store.dispatch(userError());\n      }\n    });\n  });\n  return (\n    <Router>\n      <div className=\"App\">\n        <div className=\"content\">\n          <Header />\n            <Switch>\n              <Route exact path='/' component={Index} />\n              <PrivateRoute exact path='/create-a-subreddit' component={CreateSubreddit} />\n              <Route exact path='/r/index' component={Subreddits} />\n              <Route exact path ='/r/:name' component={Subreddit} />\n              <Route exact path='/r/:name/:post_id' component={Post} />\n              <Route exact path='/u/:user_id' component={User} />\n            </Switch>\n          </div>\n        </div>\n        <Footer />\n    </Router>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport store from './store';\nimport { Provider } from 'react-redux';\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}